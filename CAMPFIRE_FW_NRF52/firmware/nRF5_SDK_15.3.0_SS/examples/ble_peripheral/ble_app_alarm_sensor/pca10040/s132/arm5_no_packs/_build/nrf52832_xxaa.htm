<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Sep 05 16:37:07 2022
<BR><P>
<H3>Maximum Stack Usage =       2168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; main_loop &rArr; IR_Task &rArr; IRInterface_DetectDeviceType &rArr; isPanasonicAcHeader &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12e]">FRACLIB_FFMUL32</a>
 <LI><a href="#[6dd]">FRACLIB_SSMUL32</a>
 <LI><a href="#[224]">FRACLIB_USMUL32</a>
 <LI><a href="#[6de]">FRACLIB_SUMUL32</a>
 <LI><a href="#[6df]">FRACLIB_UUMUL32</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[11]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
 <LI><a href="#[14]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SVC_Handler</a><BR>
 <LI><a href="#[15]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">DebugMon_Handler</a><BR>
 <LI><a href="#[16]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PendSV_Handler</a><BR>
 <LI><a href="#[27]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[fe]">nrf_log_frontend_std_0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5ee]">std_n</a><BR>
 <LI><a href="#[1b8]">matchData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b8]">matchData</a><BR>
 <LI><a href="#[15d]">Coolix_setMode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15d]">Coolix_setMode</a><BR>
 <LI><a href="#[25a]">PanasonicAc_setFan</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25a]">PanasonicAc_setFan</a><BR>
 <LI><a href="#[29c]">Sharp_setSwingV</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29c]">Sharp_setSwingV</a><BR>
 <LI><a href="#[295]">Sharp_setClean</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[297]">Sharp_setPower</a><BR>
 <LI><a href="#[ce]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[cd]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[c3]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5db]">queue_process</a><BR>
 <LI><a href="#[399]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[399]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3c]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">GPIOTE_IRQHandler</a> from main.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3b]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[44]">IRInterface_TransmitCompleted</a> from ir_interface.o(i.IRInterface_TransmitCompleted) referenced from ir_interface.o(i.IRInterface_TransmitIR)
 <LI><a href="#[70]">IR_DecodeRawFrameToUserCmd_Funiki</a> from ir_dataconverter_funiki.o(i.IR_DecodeRawFrameToUserCmd_Funiki) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[68]">IR_DecodeRawFrameToUserCmd_Hitachi</a> from ir_dataconverter-hitachi.o(i.IR_DecodeRawFrameToUserCmd_Hitachi) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[78]">IR_DecodeRawFrameToUserCmd_OG104AC</a> from ir_dataconverter_og104ac.o(i.IR_DecodeRawFrameToUserCmd_OG104AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[7c]">IR_DecodeRawFrameToUserCmd_Olimpia136AC</a> from ir_dataconverter_olimpia136ac.o(i.IR_DecodeRawFrameToUserCmd_Olimpia136AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[6f]">IR_EncodeUserCmdToIRProtocol_Funiki</a> from ir_dataconverter_funiki.o(i.IR_EncodeUserCmdToIRProtocol_Funiki) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[67]">IR_EncodeUserCmdToIRProtocol_Hitachi</a> from ir_dataconverter-hitachi.o(i.IR_EncodeUserCmdToIRProtocol_Hitachi) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[77]">IR_EncodeUserCmdToIRProtocol_OG104AC</a> from ir_dataconverter_og104ac.o(i.IR_EncodeUserCmdToIRProtocol_OG104AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[7b]">IR_EncodeUserCmdToIRProtocol_Olimpia136AC</a> from ir_dataconverter_olimpia136ac.o(i.IR_EncodeUserCmdToIRProtocol_Olimpia136AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[71]">IsEnableIrTx_Funiki</a> from ir_dataconverter_funiki.o(i.IsEnableIrTx_Funiki) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[69]">IsEnableIrTx_Hitachi</a> from ir_dataconverter-hitachi.o(i.IsEnableIrTx_Hitachi) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[79]">IsEnableIrTx_OG104AC</a> from ir_dataconverter_og104ac.o(i.IsEnableIrTx_OG104AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[7d]">IsEnableIrTx_Olimpia136AC</a> from ir_dataconverter_olimpia136ac.o(i.IsEnableIrTx_Olimpia136AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[36]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3a]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SAADC_IRQHandler</a> from nrfx_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_twi.o(.constdata)
 <LI><a href="#[1b]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[72]">SetIrTxState_Funiki</a> from ir_dataconverter_funiki.o(i.SetIrTxState_Funiki) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[6a]">SetIrTxState_Hitachi</a> from ir_dataconverter-hitachi.o(i.SetIrTxState_Hitachi) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[7a]">SetIrTxState_OG104AC</a> from ir_dataconverter_og104ac.o(i.SetIrTxState_OG104AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[7e]">SetIrTxState_Olimpia136AC</a> from ir_dataconverter_olimpia136ac.o(i.SetIrTxState_Olimpia136AC) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[17]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3e]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[24]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">TIMER1_IRQHandler</a> from main.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">TIMER4_IRQHandler</a> from ir_lib.o(i.TIMER4_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[41]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[42]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[40]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[45]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[52]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[5c]">app_rtc_timeout_handler</a> from main.o(i.app_rtc_timeout_handler) referenced from boards.o(i.timers_init)
 <LI><a href="#[4e]">apply_pending_handle</a> from gatt_cache_manager.o(i.apply_pending_handle) referenced from gatt_cache_manager.o(i.gcm_ble_evt_handler)
 <LI><a href="#[bb]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from app_ble.o(sdh_ble_observers1)
 <LI><a href="#[c4]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from app_ble.o(sdh_soc_observers1)
 <LI><a href="#[b9]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[bc]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced 2 times from ble_conn_params.o(sdh_ble_observers1)
 <LI><a href="#[c0]">ble_evt_handler</a> from app_ble.o(i.ble_evt_handler) referenced from app_ble.o(sdh_ble_observers3)
 <LI><a href="#[be]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from app_ble.o(sdh_ble_observers2)
 <LI><a href="#[60]">car_update_pending_handle</a> from gatt_cache_manager.o(i.car_update_pending_handle) referenced from gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[4f]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[4c]">conn_params_error_handler</a> from app_ble.o(i.conn_params_error_handler) referenced from app_ble.o(i.conn_params_init)
 <LI><a href="#[c]">datalog_fstorage_evt_handler</a> from app_datalog.o(i.datalog_fstorage_evt_handler) referenced 2 times from app_datalog.o(fs_data)
 <LI><a href="#[5f]">db_update_pending_handle</a> from gatt_cache_manager.o(i.db_update_pending_handle) referenced from gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[8c]">decode_Casper104</a> from ir_casper104.o(i.decode_Casper104) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[9c]">decode_Casper343</a> from ir_casper343.o(i.decode_Casper343) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[84]">decode_Coolix</a> from ir_coolix.o(i.decode_Coolix) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[98]">decode_Daikin128</a> from ir_daikin.o(i.decode_Daikin128) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[66]">decode_Daikin152</a> from ir_daikin.o(i.decode_Daikin152) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[94]">decode_Daikin160</a> from ir_daikin.o(i.decode_Daikin160) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[96]">decode_Daikin176</a> from ir_daikin.o(i.decode_Daikin176) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[90]">decode_Daikin2</a> from ir_daikin.o(i.decode_Daikin2) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[92]">decode_Daikin216</a> from ir_daikin.o(i.decode_Daikin216) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[9a]">decode_Daikin64</a> from ir_daikin.o(i.decode_Daikin64) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[6c]">decode_DaikinESP</a> from ir_daikin.o(i.decode_DaikinESP) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[a2]">decode_Gree</a> from ir_gree.o(i.decode_Gree) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[8a]">decode_LG</a> from ir_lg.o(i.decode_LG) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[76]">decode_Mitsubishi112</a> from ir_mitsubishi112.o(i.decode_Mitsubishi112) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[86]">decode_Mitsubishi136</a> from ir_mitsubishi136.o(i.decode_Mitsubishi136) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[74]">decode_Mitsubishi144</a> from ir_mitsubishi144.o(i.decode_Mitsubishi144) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[8e]">decode_MitsubishiHeavy</a> from ir_mitsubishiheavy.o(i.decode_MitsubishiHeavy) referenced 2 times from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[6e]">decode_PanasonicAc</a> from ir_panasonic.o(i.decode_PanasonicAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[88]">decode_PanasonicAc32</a> from ir_panasonic32.o(i.decode_PanasonicAc32) referenced 2 times from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[9e]">decode_ReetechAc</a> from ir_reetech.o(i.decode_ReetechAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[a4]">decode_Samsung</a> from ir_samsung.o(i.decode_Samsung) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[82]">decode_Sanyo</a> from ir_sanyo.o(i.decode_Sanyo) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[80]">decode_Sharp</a> from ir_sharp.o(i.decode_Sharp) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[62]">decode_ToshibaAc</a> from ir_toshiba.o(i.decode_ToshibaAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[a0]">decode_VestelAc</a> from ir_vestel.o(i.decode_VestelAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[8b]">encode_Casper104</a> from ir_casper104.o(i.encode_Casper104) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[9b]">encode_Casper343</a> from ir_casper343.o(i.encode_Casper343) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[83]">encode_Coolix</a> from ir_coolix.o(i.encode_Coolix) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[97]">encode_Daikin128</a> from ir_daikin.o(i.encode_Daikin128) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[65]">encode_Daikin152</a> from ir_daikin.o(i.encode_Daikin152) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[93]">encode_Daikin160</a> from ir_daikin.o(i.encode_Daikin160) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[95]">encode_Daikin176</a> from ir_daikin.o(i.encode_Daikin176) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[8f]">encode_Daikin2</a> from ir_daikin.o(i.encode_Daikin2) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[91]">encode_Daikin216</a> from ir_daikin.o(i.encode_Daikin216) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[99]">encode_Daikin64</a> from ir_daikin.o(i.encode_Daikin64) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[6b]">encode_DaikinESP</a> from ir_daikin.o(i.encode_DaikinESP) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[a1]">encode_Gree</a> from ir_gree.o(i.encode_Gree) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[89]">encode_LG</a> from ir_lg.o(i.encode_LG) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[75]">encode_Mitsubishi112</a> from ir_mitsubishi112.o(i.encode_Mitsubishi112) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[85]">encode_Mitsubishi136</a> from ir_mitsubishi136.o(i.encode_Mitsubishi136) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[73]">encode_Mitsubishi144</a> from ir_mitsubishi144.o(i.encode_Mitsubishi144) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[8d]">encode_MitsubishiHeavy</a> from ir_mitsubishiheavy.o(i.encode_MitsubishiHeavy) referenced 2 times from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[6d]">encode_PanasonicAc</a> from ir_panasonic.o(i.encode_PanasonicAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[87]">encode_PanasonicAc32</a> from ir_panasonic32.o(i.encode_PanasonicAc32) referenced 2 times from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[9d]">encode_ReetechAc</a> from ir_reetech.o(i.encode_ReetechAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[a3]">encode_Samsung</a> from ir_samsung.o(i.encode_Samsung) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[81]">encode_Sanyo</a> from ir_sanyo.o(i.encode_Sanyo) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[7f]">encode_Sharp</a> from ir_sharp.o(i.encode_Sharp) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[61]">encode_ToshibaAc</a> from ir_toshiba.o(i.encode_ToshibaAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[9f]">encode_VestelAc</a> from ir_vestel.o(i.encode_VestelAc) referenced from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[54]">end_timer_handler</a> from timeslot_handler.o(i.end_timer_handler) referenced from timeslot_handler.o(i.radio_signal_callback)
 <LI><a href="#[b2]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[8]">exit_state</a> from data_transmit_fsm.o(i.exit_state) referenced 2 times from data_transmit_fsm.o(.data)
 <LI><a href="#[d]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[b]">fstorage_evt_handler</a> from nrf_use_flash.o(i.fstorage_evt_handler) referenced 2 times from nrf_use_flash.o(fs_data)
 <LI><a href="#[4d]">gatt_evt_handler</a> from app_ble.o(i.gatt_evt_handler) referenced from app_ble.o(i.gatt_init)
 <LI><a href="#[ad]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[a9]">gcm_pdb_evt_handler</a> from gatt_cache_manager.o(i.gcm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[4a]">gpiote_btn0_event_handler</a> from btn.o(i.gpiote_btn0_event_handler) referenced from btn.o(i.btn_init)
 <LI><a href="#[47]">gpiote_handler</a> from app_gpiote.o(i.gpiote_handler) referenced from app_gpiote.o(i.app_gpiote_user_register)
 <LI><a href="#[a8]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[ae]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3]">ir_exit_state</a> from ir_learning_fsm.o(i.ir_exit_state) referenced 2 times from ir_learning_fsm.o(.data)
 <LI><a href="#[63]">isIrTxEnable</a> from ir_common.o(i.isIrTxEnable) referenced 27 times from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[b5]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[43]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5b]">link_secure_pending_handle</a> from security_manager.o(i.link_secure_pending_handle) referenced from security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[5b]">link_secure_pending_handle</a> from security_manager.o(i.link_secure_pending_handle) referenced from security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[3d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[ba]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from app_ble.o(sdh_ble_observers1)
 <LI><a href="#[bf]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from app_ble.o(sdh_ble_observers2)
 <LI><a href="#[c1]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[c9]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[c3]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[b8]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[b7]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[b6]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[57]">nrf_qwr_error_handler</a> from app_ble.o(i.nrf_qwr_error_handler) referenced from app_ble.o(i.services_init)
 <LI><a href="#[c6]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[c7]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[58]">nus_data_handler</a> from app_ble.o(i.nus_data_handler) referenced from app_ble.o(i.services_init)
 <LI><a href="#[46]">on_adv_evt</a> from app_ble.o(i.on_adv_evt) referenced from app_ble.o(i.advertising_init)
 <LI><a href="#[4b]">on_conn_params_evt</a> from app_ble.o(i.on_conn_params_evt) referenced from app_ble.o(i.conn_params_init)
 <LI><a href="#[5a]">params_reply_pending_handle</a> from security_manager.o(i.params_reply_pending_handle) referenced from security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[5a]">params_reply_pending_handle</a> from security_manager.o(i.params_reply_pending_handle) referenced from security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[a5]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[9]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[a]">pm_gscm_evt_handler</a> from peer_manager.o(i.pm_gscm_evt_handler) referenced 2 times from gatts_cache_manager.o(.data)
 <LI><a href="#[ac]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[a6]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[ab]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[5d]">radio_signal_callback</a> from timeslot_handler.o(i.radio_signal_callback) referenced from timeslot_handler.o(i.timeslot_handler_init)
 <LI><a href="#[b0]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[b3]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[59]">rx_abort_cb</a> from radio_control.o(i.rx_abort_cb) referenced from radio_control.o(i.setup_rx_timeout)
 <LI><a href="#[55]">saadc_event_handler</a> from adc_task.o(i.saadc_event_handler) referenced from adc_task.o(i.saadc_init)
 <LI><a href="#[56]">sc_send_pending_handle</a> from gatt_cache_manager.o(i.sc_send_pending_handle) referenced from gatt_cache_manager.o(i.service_changed_pending_flags_check)
 <LI><a href="#[c8]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[53]">search_callback</a> from transport_control.o(i.search_callback) referenced from transport_control.o(i.order_search)
 <LI><a href="#[51]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[64]">setIrTxState</a> from ir_common.o(i.setIrTxState) referenced 27 times from ir_deviceconstructor.o(.constdata)
 <LI><a href="#[a7]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[aa]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[c2]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[0]">standby_state</a> from ir_learning_fsm.o(i.standby_state) referenced 4 times from ir_learning_fsm.o(.data)
 <LI><a href="#[1]">start_state</a> from ir_learning_fsm.o(i.start_state) referenced 4 times from ir_learning_fsm.o(.data)
 <LI><a href="#[c5]">sys_evt_dispatch</a> from app_ble.o(i.sys_evt_dispatch) referenced from app_ble.o(sdh_soc_observers1)
 <LI><a href="#[49]">tag_button_timeout_handler</a> from btn.o(i.tag_button_timeout_handler) referenced from btn.o(i.btn_init)
 <LI><a href="#[2]">transmit_data_state</a> from ir_learning_fsm.o(i.transmit_data_state) referenced 2 times from ir_learning_fsm.o(.data)
 <LI><a href="#[6]">transmit_state</a> from data_transmit_fsm.o(i.transmit_state) referenced 2 times from data_transmit_fsm.o(.data)
 <LI><a href="#[5e]">trickle_step_callback</a> from transport_control.o(i.trickle_step_callback) referenced from transport_control.o(i.transport_control_step)
 <LI><a href="#[5e]">trickle_step_callback</a> from transport_control.o(i.trickle_step_callback) referenced from transport_control.o(i.trickle_step_callback)
 <LI><a href="#[50]">twi_evt_handler</a> from nrf_drv_twi.o(i.twi_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[af]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[48]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[7]">wait_state</a> from data_transmit_fsm.o(i.wait_state) referenced 2 times from data_transmit_fsm.o(.data)
 <LI><a href="#[b4]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[b1]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[6d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ca]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ea]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6d5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6d6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6d7]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[6d8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6d9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[cc]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_error_handler_keil.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_btn0_event_handler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_init
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_enable_all_handle
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_init
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_put
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb_sync_exec
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_handler_init
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_ppi
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb_ppi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_put
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_setup
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_timeslot_order
</UL>

<P><STRONG><a name="[5ae]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[cd]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[5b1]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[ce]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[5ad]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[5ba]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[5b9]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[5b7]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[6da]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[5b6]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[5bc]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[6db]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[6dc]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>FRACLIB_FFMUL32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fraclib_mul32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mul_lll
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord_ll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[6dd]"></a>FRACLIB_SSMUL32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fraclib_mul32.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>FRACLIB_USMUL32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fraclib_mul32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mul_lll
</UL>

<P><STRONG><a name="[6de]"></a>FRACLIB_SUMUL32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fraclib_mul32.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>FRACLIB_UUMUL32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fraclib_mul32.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_add_packet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_interval_begin
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_send
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_recv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataToRaw
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseBits
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6e0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_send
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_send
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6e1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[43]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_get_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketGet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketAddToList
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketGet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketAddToList
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketGet
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketAddToList
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketAddToList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMakeOtp
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetDataLogTail
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setRaw
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setRaw
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setRaw
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setRaw
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setRaw
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setRaw
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setRaw
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setRaw
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_setRaw
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setRaw
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_setRaw
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setRaw
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setRaw
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setRaw
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setRaw
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setRaw
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_create_from_data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_assemble
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_set
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_get
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructSpecificDeviceType
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_recv
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_isHeaderMatch
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_recv
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_sendOn
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_sendOff
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_storage_full_evt
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_params_req
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_put
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_get
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_put
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek_at
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get
</UL>

<P><STRONG><a name="[6e2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6e3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawBuf
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawBuf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_init
</UL>

<P><STRONG><a name="[6e5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[fd]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[f9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
</UL>

<P><STRONG><a name="[125]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_recv
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>

<P><STRONG><a name="[2d1]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[d6]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[d8]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[eb]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getTemp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fahrenheitToCelsius
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_ReadResults
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fahrenheitToCelsius
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_ReadResults
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fahrenheitToCelsius
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_ReadResults
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getTemp
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fahrenheitToCelsius
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
</UL>

<P><STRONG><a name="[6e6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fahrenheitToCelsius
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getTemp
</UL>

<P><STRONG><a name="[6e7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[d7]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[40]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[6e9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[6ea]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[dc]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6eb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__vfscanf</STRONG> (Thumb, 810 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[6ec]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6ed]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>AES_encrypt</STRONG> (Thumb, 706 bytes, Stack size 64 bytes, aes128.o(i.AES_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AES_encrypt &rArr; fwd_mcol
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwd_mcol
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD8_TO_WORD32
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMakeOtp
</UL>

<P><STRONG><a name="[ef]"></a>AES_keyschedule_enc</STRONG> (Thumb, 244 bytes, Stack size 36 bytes, aes128.o(i.AES_keyschedule_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AES_keyschedule_enc &rArr; WORD8_TO_WORD32
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WORD8_TO_WORD32
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMakeOtp
</UL>

<P><STRONG><a name="[f0]"></a>AppMakeOtp</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, app_message_queue.o(i.AppMakeOtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AppMakeOtp &rArr; AES_encrypt &rArr; fwd_mcol
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_encrypt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>AppMessageQueueInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_message_queue.o(i.AppMessageQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppMessageQueueInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_init
</UL>

<P><STRONG><a name="[f4]"></a>AppSettingsTask</STRONG> (Thumb, 972 bytes, Stack size 336 bytes, app_settings.o(i.AppSettingsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AppSettingsTask &rArr; CFG_Save &rArr; nrf_use_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_device_disconnect
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_is_connected
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_get_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_indicator_led_on
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_indicator_led_off
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task_trigger
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructSpecificDeviceType
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[106]"></a>AppShowiSmartPacket</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, app_message_queue.o(i.AppShowiSmartPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
</UL>

<P><STRONG><a name="[10b]"></a>App_ProcessPacket</STRONG> (Thumb, 862 bytes, Stack size 32 bytes, app_mesh.o(i.App_ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = App_ProcessPacket &rArr; app_alarm_set_config &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led_pwm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_led_pwm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_clear
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_blink_trigger
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_set_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_get_config
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task_trigger
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_get_status_from_payload
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_PrepareDataToSend
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_EncodeBLEToIR
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
</UL>

<P><STRONG><a name="[117]"></a>App_iSmartAppPacketAddToList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_message_queue.o(i.App_iSmartAppPacketAddToList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_iSmartAppPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
</UL>

<P><STRONG><a name="[119]"></a>App_iSmartAppPacketGet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_message_queue.o(i.App_iSmartAppPacketGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_iSmartAppPacketGet
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
</UL>

<P><STRONG><a name="[11c]"></a>App_iSmartEventPacketAddToList</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_message_queue.o(i.App_iSmartEventPacketAddToList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = App_iSmartEventPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
</UL>

<P><STRONG><a name="[11d]"></a>App_iSmartEventPacketGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_message_queue.o(i.App_iSmartEventPacketGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_iSmartEventPacketGet
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby_state
</UL>

<P><STRONG><a name="[11e]"></a>App_iSmartMeshPacketAddToList</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_message_queue.o(i.App_iSmartMeshPacketAddToList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_iSmartMeshPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendFromNUSToMesh
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
</UL>

<P><STRONG><a name="[11f]"></a>App_iSmartMeshPacketGet</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_message_queue.o(i.App_iSmartMeshPacketGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_iSmartMeshPacketGet
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
</UL>

<P><STRONG><a name="[120]"></a>App_iSmartPacketAddToList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_message_queue.o(i.App_iSmartPacketAddToList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_iSmartPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendFromNUSToMesh
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_report_reset
</UL>

<P><STRONG><a name="[121]"></a>App_iSmartPacketGet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_message_queue.o(i.App_iSmartPacketGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_iSmartPacketGet
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
</UL>

<P><STRONG><a name="[122]"></a>BLE_SendFromNUSToMesh</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_ble.o(i.BLE_SendFromNUSToMesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLE_SendFromNUSToMesh &rArr; App_iSmartPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketAddToList
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketAddToList
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task
</UL>

<P><STRONG><a name="[123]"></a>CFG_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_config.o(i.CFG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CFG_Init &rArr; nrf_use_flash_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>CFG_Load</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, system_config.o(i.CFG_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CFG_Load &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructDeviceType
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>CFG_Save</STRONG> (Thumb, 242 bytes, Stack size 552 bytes, system_config.o(i.CFG_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = CFG_Save &rArr; nrf_use_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_store
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_erase
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_flash_program_calculate_crc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_pending
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>CFG_Saving_Task</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, system_config.o(i.CFG_Saving_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = CFG_Saving_Task &rArr; CFG_Save &rArr; nrf_use_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[2b4]"></a>CFG_Saving_Tick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_config.o(i.CFG_Saving_Tick))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[112]"></a>CFG_Saving_Trigger</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_config.o(i.CFG_Saving_Trigger))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_IR_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_timer_event_data
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_schedule_event_data
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>Casper104_calcChecksum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_casper104.o(i.Casper104_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Casper104_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_validChecksum
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_checksum
</UL>

<P><STRONG><a name="[137]"></a>Casper104_checksum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir_casper104.o(i.Casper104_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Casper104_checksum &rArr; Casper104_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getRaw
</UL>

<P><STRONG><a name="[479]"></a>Casper104_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[476]"></a>Casper104_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[141]"></a>Casper104_getButton</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_getButton))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setButton
</UL>

<P><STRONG><a name="[3d9]"></a>Casper104_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[143]"></a>Casper104_getMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setFan
</UL>

<P><STRONG><a name="[3d7]"></a>Casper104_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[138]"></a>Casper104_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_casper104.o(i.Casper104_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Casper104_getRaw &rArr; Casper104_checksum &rArr; Casper104_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[3db]"></a>Casper104_getSwingV</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[3d8]"></a>Casper104_getTemp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[139]"></a>Casper104_isHeaderMatch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ir_casper104.o(i.Casper104_isHeaderMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Casper104_isHeaderMatch &rArr; Casper104_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[13b]"></a>Casper104_recv</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, ir_casper104.o(i.Casper104_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Casper104_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_isHeaderMatch
</UL>

<P><STRONG><a name="[13e]"></a>Casper104_send</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, ir_casper104.o(i.Casper104_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Casper104_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[140]"></a>Casper104_setButton</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ir_casper104.o(i.Casper104_setButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Casper104_setButton
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getButton
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[142]"></a>Casper104_setFan</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, ir_casper104.o(i.Casper104_setFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Casper104_setFan
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[477]"></a>Casper104_setMode</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[475]"></a>Casper104_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[144]"></a>Casper104_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_casper104.o(i.Casper104_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Casper104_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[47a]"></a>Casper104_setSwingV</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_setSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[478]"></a>Casper104_setTemp</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>

<P><STRONG><a name="[3da]"></a>Casper104_toCommonFanSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[3dc]"></a>Casper104_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_casper104.o(i.Casper104_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
</UL>

<P><STRONG><a name="[13d]"></a>Casper104_validChecksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_casper104.o(i.Casper104_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Casper104_validChecksum &rArr; Casper104_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_recv
</UL>

<P><STRONG><a name="[145]"></a>Casper343_ClearData</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ir_casper343.o(i.Casper343_ClearData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Casper343_ClearData
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setSwingV
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[147]"></a>Casper343_checksum</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ir_casper343.o(i.Casper343_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Casper343_checksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getRaw
</UL>

<P><STRONG><a name="[47d]"></a>Casper343_convertMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[3e0]"></a>Casper343_getFan</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[3e2]"></a>Casper343_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[3de]"></a>Casper343_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[149]"></a>Casper343_getRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_casper343.o(i.Casper343_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Casper343_getRaw &rArr; Casper343_checksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[3e1]"></a>Casper343_getSwingV</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[3df]"></a>Casper343_getTemp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[14a]"></a>Casper343_recv</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, ir_casper343.o(i.Casper343_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Casper343_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCapser343
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[14e]"></a>Casper343_send</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, ir_casper343.o(i.Casper343_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Casper343_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[480]"></a>Casper343_setCommand</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_setCommand))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[47f]"></a>Casper343_setFan</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[47e]"></a>Casper343_setMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[47b]"></a>Casper343_setPower</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[14f]"></a>Casper343_setRaw</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ir_casper343.o(i.Casper343_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Casper343_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[146]"></a>Casper343_setSwingV</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_setSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_ClearData
</UL>

<P><STRONG><a name="[47c]"></a>Casper343_setTemp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
</UL>

<P><STRONG><a name="[3e3]"></a>Casper343_toCommonMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_casper343.o(i.Casper343_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
</UL>

<P><STRONG><a name="[14d]"></a>Casper343_validChecksum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ir_casper343.o(i.Casper343_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Casper343_validChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_recv
</UL>

<P><STRONG><a name="[150]"></a>Coolix_clearSensorTemp</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ir_coolix.o(i.Coolix_clearSensorTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Coolix_clearSensorTemp &rArr; Coolix_setZoneFollow &rArr; Coolix_setFan &rArr; Coolix_getMode
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setZoneFollow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setSensorTempRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_stateReset
</UL>

<P><STRONG><a name="[482]"></a>Coolix_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
</UL>

<P><STRONG><a name="[481]"></a>Coolix_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
</UL>

<P><STRONG><a name="[164]"></a>Coolix_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_stateReset
</UL>

<P><STRONG><a name="[153]"></a>Coolix_getMode</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ir_coolix.o(i.Coolix_getMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Coolix_getMode
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getTempRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setFan
</UL>

<P><STRONG><a name="[3e4]"></a>Coolix_getPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
</UL>

<P><STRONG><a name="[483]"></a>Coolix_getRaw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_getRaw))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
</UL>

<P><STRONG><a name="[155]"></a>Coolix_getTemp</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, ir_coolix.o(i.Coolix_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Coolix_getTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getTempRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
</UL>

<P><STRONG><a name="[154]"></a>Coolix_getTempRaw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_getTempRaw))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getTemp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getMode
</UL>

<P><STRONG><a name="[163]"></a>Coolix_handleSpecialState</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_handleSpecialState))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setRaw
</UL>

<P><STRONG><a name="[157]"></a>Coolix_isSpecialState</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_isSpecialState))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_updateAndSaveState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recoverSavedState
</UL>

<P><STRONG><a name="[156]"></a>Coolix_recoverSavedState</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ir_coolix.o(i.Coolix_recoverSavedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Coolix_recoverSavedState &rArr; Coolix_stateReset &rArr; Coolix_setRaw &rArr; Coolix_setMode &rArr;  Coolix_setMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_stateReset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_isSpecialState
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setPower
</UL>

<P><STRONG><a name="[159]"></a>Coolix_recv</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, ir_coolix.o(i.Coolix_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Coolix_recv &rArr; matchMark &rArr; match &rArr; ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Coolix
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
</UL>

<P><STRONG><a name="[15a]"></a>Coolix_send</STRONG> (Thumb, 246 bytes, Stack size 88 bytes, ir_coolix.o(i.Coolix_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Coolix_send &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataToRaw
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
</UL>

<P><STRONG><a name="[15c]"></a>Coolix_setFan</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, ir_coolix.o(i.Coolix_setFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Coolix_setFan &rArr; Coolix_getMode
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getMode
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setZoneFollow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
</UL>

<P><STRONG><a name="[15d]"></a>Coolix_setMode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ir_coolix.o(i.Coolix_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = Coolix_setMode &rArr;  Coolix_setMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setTempRaw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setTemp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setFan
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setRaw
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
</UL>

<P><STRONG><a name="[160]"></a>Coolix_setPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ir_coolix.o(i.Coolix_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Coolix_setPower &rArr; Coolix_recoverSavedState &rArr; Coolix_stateReset &rArr; Coolix_setRaw &rArr; Coolix_setMode &rArr;  Coolix_setMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_updateAndSaveState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recoverSavedState
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
</UL>

<P><STRONG><a name="[162]"></a>Coolix_setRaw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ir_coolix.o(i.Coolix_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Coolix_setRaw &rArr; Coolix_setMode &rArr;  Coolix_setMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_handleSpecialState
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Coolix
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_stateReset
</UL>

<P><STRONG><a name="[152]"></a>Coolix_setSensorTempRaw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_setSensorTempRaw))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_clearSensorTemp
</UL>

<P><STRONG><a name="[15e]"></a>Coolix_setTemp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ir_coolix.o(i.Coolix_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Coolix_setTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setTempRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
</UL>

<P><STRONG><a name="[15f]"></a>Coolix_setTempRaw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_setTempRaw))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setTemp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
</UL>

<P><STRONG><a name="[151]"></a>Coolix_setZoneFollow</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ir_coolix.o(i.Coolix_setZoneFollow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Coolix_setZoneFollow &rArr; Coolix_setFan &rArr; Coolix_getMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setFan
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_clearSensorTemp
</UL>

<P><STRONG><a name="[158]"></a>Coolix_stateReset</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ir_coolix.o(i.Coolix_stateReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Coolix_stateReset &rArr; Coolix_setRaw &rArr; Coolix_setMode &rArr;  Coolix_setMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setRaw
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getFan
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_clearSensorTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recoverSavedState
</UL>

<P><STRONG><a name="[3e5]"></a>Coolix_toCommonFanSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
</UL>

<P><STRONG><a name="[3e6]"></a>Coolix_toCommonMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_coolix.o(i.Coolix_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
</UL>

<P><STRONG><a name="[161]"></a>Coolix_updateAndSaveState</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ir_coolix.o(i.Coolix_updateAndSaveState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Coolix_updateAndSaveState
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_isSpecialState
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setPower
</UL>

<P><STRONG><a name="[165]"></a>Daikin128_calcFirstChecksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_calcFirstChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Daikin128_calcFirstChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumNibbles_8
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_validChecksum
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_checksum
</UL>

<P><STRONG><a name="[167]"></a>Daikin128_calcSecondChecksum</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_calcSecondChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Daikin128_calcSecondChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumNibbles_8
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_validChecksum
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_checksum
</UL>

<P><STRONG><a name="[168]"></a>Daikin128_checksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Daikin128_checksum &rArr; Daikin128_calcSecondChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_calcSecondChecksum
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_calcFirstChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getRaw
</UL>

<P><STRONG><a name="[486]"></a>Daikin128_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[485]"></a>Daikin128_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[172]"></a>Daikin128_getEcono</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_getEcono))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setMode
</UL>

<P><STRONG><a name="[170]"></a>Daikin128_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setMode
</UL>

<P><STRONG><a name="[3ea]"></a>Daikin128_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[3e7]"></a>Daikin128_getPowerToggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_getPowerToggle))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[169]"></a>Daikin128_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Daikin128_getRaw &rArr; Daikin128_checksum &rArr; Daikin128_calcSecondChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[3e9]"></a>Daikin128_getSwingVertical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[16a]"></a>Daikin128_getTemp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin128_getTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdToUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[16c]"></a>Daikin128_recv</STRONG> (Thumb, 384 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin128_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Daikin128_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[16e]"></a>Daikin128_send</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, ir_daikin.o(i.Daikin128_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Daikin128_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[173]"></a>Daikin128_setEcono</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_setEcono))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setMode
</UL>

<P><STRONG><a name="[171]"></a>Daikin128_setFan</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_setFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin128_setFan
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setMode
</UL>

<P><STRONG><a name="[16f]"></a>Daikin128_setMode</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ir_daikin.o(i.Daikin128_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin128_setMode &rArr; Daikin128_setFan
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setFan
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setEcono
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getFan
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getEcono
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[484]"></a>Daikin128_setPowerToggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_setPowerToggle))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[174]"></a>Daikin128_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin128_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[175]"></a>Daikin128_setTemp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin128_setTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8ToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
</UL>

<P><STRONG><a name="[3e8]"></a>Daikin128_toCommonFanSpeed</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[3eb]"></a>Daikin128_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin128_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[16d]"></a>Daikin128_validChecksum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin128_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Daikin128_validChecksum &rArr; Daikin128_calcSecondChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_calcSecondChecksum
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_calcFirstChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_recv
</UL>

<P><STRONG><a name="[177]"></a>Daikin152_checksum</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin152_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin152_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getRaw
</UL>

<P><STRONG><a name="[3ef]"></a>Daikin152_getFan</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[3f2]"></a>Daikin152_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[3ed]"></a>Daikin152_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[17c]"></a>Daikin152_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin152_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin152_getRaw &rArr; Daikin152_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[3f1]"></a>Daikin152_getSwingV</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[3ee]"></a>Daikin152_getTemp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[17d]"></a>Daikin152_isHeaderMatch</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, ir_daikin.o(i.Daikin152_isHeaderMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Daikin152_isHeaderMatch &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[17f]"></a>Daikin152_recv</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, ir_daikin.o(i.Daikin152_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Daikin152_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_validChecksum
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[181]"></a>Daikin152_send</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin152_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Daikin152_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[488]"></a>Daikin152_setFan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[183]"></a>Daikin152_setMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin152_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin152_setMode
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[487]"></a>Daikin152_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[185]"></a>Daikin152_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin152_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin152_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[184]"></a>Daikin152_setTemp</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin152_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setMode
</UL>

<P><STRONG><a name="[186]"></a>Daikin160_checksum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin160_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin160_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getRaw
</UL>

<P><STRONG><a name="[48c]"></a>Daikin160_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[187]"></a>Daikin160_convertMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin160_convertMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin160_convertMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertMode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[3f6]"></a>Daikin160_getFan</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[3f8]"></a>Daikin160_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[3f4]"></a>Daikin160_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[188]"></a>Daikin160_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin160_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin160_getRaw &rArr; Daikin160_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[3f7]"></a>Daikin160_getSwingVertical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[3f5]"></a>Daikin160_getTemp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[189]"></a>Daikin160_recv</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin160_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Daikin160_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[18b]"></a>Daikin160_send</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, ir_daikin.o(i.Daikin160_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Daikin160_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[48d]"></a>Daikin160_setFan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[48b]"></a>Daikin160_setMode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[489]"></a>Daikin160_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[18c]"></a>Daikin160_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin160_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin160_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
</UL>

<P><STRONG><a name="[48a]"></a>Daikin160_setTemp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin160_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
</UL>

<P><STRONG><a name="[18a]"></a>Daikin160_validChecksum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin160_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin160_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_recv
</UL>

<P><STRONG><a name="[18d]"></a>Daikin176_checksum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin176_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin176_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getRaw
</UL>

<P><STRONG><a name="[3fa]"></a>Daikin176_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[3fc]"></a>Daikin176_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[3f9]"></a>Daikin176_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[18e]"></a>Daikin176_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin176_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin176_getRaw &rArr; Daikin176_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[193]"></a>Daikin176_getTemp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setRaw
</UL>

<P><STRONG><a name="[18f]"></a>Daikin176_recv</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin176_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Daikin176_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[191]"></a>Daikin176_send</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, ir_daikin.o(i.Daikin176_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Daikin176_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[493]"></a>Daikin176_setFan</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[491]"></a>Daikin176_setMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[48e]"></a>Daikin176_setPower</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[192]"></a>Daikin176_setRaw</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin176_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin176_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getTemp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[48f]"></a>Daikin176_setTemp</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[194]"></a>Daikin216_checksum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin216_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin216_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getRaw
</UL>

<P><STRONG><a name="[195]"></a>Daikin216_convertFan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin216_convertFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin216_convertFan
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertFan
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[196]"></a>Daikin216_convertMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin216_convertMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin216_convertMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertMode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[403]"></a>Daikin216_getFan</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[405]"></a>Daikin216_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[401]"></a>Daikin216_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[197]"></a>Daikin216_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin216_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin216_getRaw &rArr; Daikin216_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[404]"></a>Daikin216_getSwingVertical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[402]"></a>Daikin216_getTemp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[198]"></a>Daikin216_isHeaderMatch</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, ir_daikin.o(i.Daikin216_isHeaderMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Daikin216_isHeaderMatch &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[199]"></a>Daikin216_recv</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin216_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Daikin216_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[19b]"></a>Daikin216_send</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, ir_daikin.o(i.Daikin216_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Daikin216_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[499]"></a>Daikin216_setFan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[498]"></a>Daikin216_setMode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[496]"></a>Daikin216_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[19c]"></a>Daikin216_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin216_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin216_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
</UL>

<P><STRONG><a name="[497]"></a>Daikin216_setTemp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin216_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
</UL>

<P><STRONG><a name="[19a]"></a>Daikin216_validChecksum</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin216_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin216_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_recv
</UL>

<P><STRONG><a name="[19d]"></a>Daikin2_checksum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin2_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin2_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getRaw
</UL>

<P><STRONG><a name="[19e]"></a>Daikin2_convertFan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin2_convertFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin2_convertFan
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertFan
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[19f]"></a>Daikin2_convertMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin2_convertMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin2_convertMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[3ff]"></a>Daikin2_getFan</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
</UL>

<P><STRONG><a name="[1a9]"></a>Daikin2_getHumidity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_getHumidity))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setMode
</UL>

<P><STRONG><a name="[1a5]"></a>Daikin2_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setHumidity
</UL>

<P><STRONG><a name="[3fe]"></a>Daikin2_getPower</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
</UL>

<P><STRONG><a name="[1a0]"></a>Daikin2_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin2_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin2_getRaw &rArr; Daikin2_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[400]"></a>Daikin2_getSwingVertical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
</UL>

<P><STRONG><a name="[1a6]"></a>Daikin2_getTemp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setMode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setHumidity
</UL>

<P><STRONG><a name="[1a1]"></a>Daikin2_recv</STRONG> (Thumb, 318 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin2_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Daikin2_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
</UL>

<P><STRONG><a name="[1a3]"></a>Daikin2_send</STRONG> (Thumb, 268 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin2_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Daikin2_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[495]"></a>Daikin2_setFan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[1a4]"></a>Daikin2_setHumidity</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, ir_daikin.o(i.Daikin2_setHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Daikin2_setHumidity
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setTemp
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getTemp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setMode
</UL>

<P><STRONG><a name="[1a8]"></a>Daikin2_setMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin2_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin2_setMode &rArr; Daikin2_setHumidity
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setTemp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setHumidity
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getTemp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[494]"></a>Daikin2_setPower</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
</UL>

<P><STRONG><a name="[1aa]"></a>Daikin2_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin2_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin2_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
</UL>

<P><STRONG><a name="[1a7]"></a>Daikin2_setTemp</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin2_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setMode
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setHumidity
</UL>

<P><STRONG><a name="[1a2]"></a>Daikin2_validChecksum</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin2_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin2_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_recv
</UL>

<P><STRONG><a name="[1ac]"></a>Daikin64_calcChecksum</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, ir_daikin.o(i.Daikin64_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Daikin64_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_validChecksum
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_checksum
</UL>

<P><STRONG><a name="[1ab]"></a>Daikin64_checksum</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ir_daikin.o(i.Daikin64_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Daikin64_checksum &rArr; Daikin64_calcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getRaw
</UL>

<P><STRONG><a name="[49c]"></a>Daikin64_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[49a]"></a>Daikin64_convertMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[407]"></a>Daikin64_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[40a]"></a>Daikin64_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1ad]"></a>Daikin64_getPowerToggle</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, ir_daikin.o(i.Daikin64_getPowerToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Daikin64_getPowerToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setPowerToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1af]"></a>Daikin64_getRaw</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ir_daikin.o(i.Daikin64_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin64_getRaw &rArr; Daikin64_checksum &rArr; Daikin64_calcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[409]"></a>Daikin64_getSwingVertical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1b0]"></a>Daikin64_getTemp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin64_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin64_getTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcdToUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1b1]"></a>Daikin64_recv</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, ir_daikin.o(i.Daikin64_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Daikin64_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1b3]"></a>Daikin64_send</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, ir_daikin.o(i.Daikin64_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Daikin64_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[49d]"></a>Daikin64_setFan</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[49b]"></a>Daikin64_setMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[1ae]"></a>Daikin64_setPowerToggle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_setPowerToggle))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getPowerToggle
</UL>

<P><STRONG><a name="[406]"></a>Daikin64_setRaw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_setRaw))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1b4]"></a>Daikin64_setTemp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin64_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Daikin64_setTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8ToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
</UL>

<P><STRONG><a name="[408]"></a>Daikin64_toCommonFanSpeed</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[40b]"></a>Daikin64_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin64_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
</UL>

<P><STRONG><a name="[1b2]"></a>Daikin64_validChecksum</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ir_daikin.o(i.Daikin64_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Daikin64_validChecksum &rArr; Daikin64_calcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_recv
</UL>

<P><STRONG><a name="[1b5]"></a>DaikinESP_checksum</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ir_daikin.o(i.DaikinESP_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DaikinESP_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_stateReset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getRaw
</UL>

<P><STRONG><a name="[40e]"></a>DaikinESP_getFan</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[410]"></a>DaikinESP_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[40c]"></a>DaikinESP_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[1b6]"></a>DaikinESP_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_daikin.o(i.DaikinESP_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DaikinESP_getRaw &rArr; DaikinESP_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
</UL>

<P><STRONG><a name="[40f]"></a>DaikinESP_getSwingVertical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[40d]"></a>DaikinESP_getTemp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[1b7]"></a>DaikinESP_isHeaderMatch</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, ir_daikin.o(i.DaikinESP_isHeaderMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = DaikinESP_isHeaderMatch &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1b9]"></a>DaikinESP_recv</STRONG> (Thumb, 408 bytes, Stack size 120 bytes, ir_daikin.o(i.DaikinESP_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = DaikinESP_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_validChecksum
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[1bb]"></a>DaikinESP_send</STRONG> (Thumb, 424 bytes, Stack size 88 bytes, ir_daikin.o(i.DaikinESP_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DaikinESP_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
</UL>

<P><STRONG><a name="[4a1]"></a>DaikinESP_setFan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
</UL>

<P><STRONG><a name="[4a0]"></a>DaikinESP_setMode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
</UL>

<P><STRONG><a name="[49e]"></a>DaikinESP_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
</UL>

<P><STRONG><a name="[1bc]"></a>DaikinESP_setRaw</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ir_daikin.o(i.DaikinESP_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DaikinESP_setRaw &rArr; DaikinESP_stateReset &rArr; DaikinESP_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_stateReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
</UL>

<P><STRONG><a name="[49f]"></a>DaikinESP_setTemp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
</UL>

<P><STRONG><a name="[1bd]"></a>DaikinESP_stateReset</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ir_daikin.o(i.DaikinESP_stateReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DaikinESP_stateReset &rArr; DaikinESP_checksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_setRaw
</UL>

<P><STRONG><a name="[20b]"></a>FlushData</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_common.o(i.FlushData))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[1e]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_IsTransmitBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>Gree_calcBlockChecksum</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ir_gree.o(i.Gree_calcBlockChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gree_calcBlockChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_validChecksum
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_checksum
</UL>

<P><STRONG><a name="[1bf]"></a>Gree_checksum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ir_gree.o(i.Gree_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gree_checksum &rArr; Gree_calcBlockChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_calcBlockChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_fixup
</UL>

<P><STRONG><a name="[4a2]"></a>Gree_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
</UL>

<P><STRONG><a name="[4a3]"></a>Gree_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
</UL>

<P><STRONG><a name="[1c1]"></a>Gree_fixup</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ir_gree.o(i.Gree_fixup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Gree_fixup &rArr; Gree_checksum &rArr; Gree_calcBlockChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setPower
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_getPower
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_getRaw
</UL>

<P><STRONG><a name="[1c2]"></a>Gree_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_fixup
</UL>

<P><STRONG><a name="[1c4]"></a>Gree_getRaw</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ir_gree.o(i.Gree_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gree_getRaw &rArr; Gree_fixup &rArr; Gree_checksum &rArr; Gree_calcBlockChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_fixup
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
</UL>

<P><STRONG><a name="[414]"></a>Gree_getSwingVerticalPosition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_getSwingVerticalPosition))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
</UL>

<P><STRONG><a name="[412]"></a>Gree_getTemp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
</UL>

<P><STRONG><a name="[1c5]"></a>Gree_recv</STRONG> (Thumb, 344 bytes, Stack size 112 bytes, ir_gree.o(i.Gree_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Gree_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_validChecksum
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreeAc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
</UL>

<P><STRONG><a name="[1c7]"></a>Gree_send</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, ir_gree.o(i.Gree_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Gree_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
</UL>

<P><STRONG><a name="[1ca]"></a>Gree_setFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setMode
</UL>

<P><STRONG><a name="[1c8]"></a>Gree_setMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ir_gree.o(i.Gree_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Gree_setMode &rArr; Gree_setTemp &rArr; fahrenheitToCelsius &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setFan
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
</UL>

<P><STRONG><a name="[1c3]"></a>Gree_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_fixup
</UL>

<P><STRONG><a name="[411]"></a>Gree_setRaw</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_setRaw))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreeAc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
</UL>

<P><STRONG><a name="[4a4]"></a>Gree_setSwingVertical</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ir_gree.o(i.Gree_setSwingVertical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gree_setSwingVertical
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
</UL>

<P><STRONG><a name="[1c9]"></a>Gree_setTemp</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ir_gree.o(i.Gree_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Gree_setTemp &rArr; fahrenheitToCelsius &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fahrenheitToCelsius
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setUseFahrenheit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setMode
</UL>

<P><STRONG><a name="[1cc]"></a>Gree_setUseFahrenheit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_setUseFahrenheit))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
</UL>

<P><STRONG><a name="[413]"></a>Gree_toCommonFanSpeed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
</UL>

<P><STRONG><a name="[415]"></a>Gree_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_gree.o(i.Gree_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
</UL>

<P><STRONG><a name="[1c6]"></a>Gree_validChecksum</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ir_gree.o(i.Gree_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Gree_validChecksum &rArr; Gree_calcBlockChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_calcBlockChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_recv
</UL>

<P><STRONG><a name="[205]"></a>HAL_Delay_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[208]"></a>IRInterface_Decode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ir_interface.o(i.IRInterface_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRInterface_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[1ce]"></a>IRInterface_DetectDeviceType</STRONG> (Thumb, 816 bytes, Stack size 24 bytes, ir_deviceconstructor.o(i.IRInterface_DetectDeviceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = IRInterface_DetectDeviceType &rArr; isPanasonicAcHeader &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreeAc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isVestelAc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamsung
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPanasonicAcHeader
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Toshiba
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Reetech
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Coolix
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCapser343
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_set152AcTypes
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_isHeaderMatch
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_isHeaderMatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_isHeaderMatch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_isHeaderMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[10f]"></a>IRInterface_EncodeBLEToIR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ir_interface.o(i.IRInterface_EncodeBLEToIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRInterface_EncodeBLEToIR
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
</UL>

<P><STRONG><a name="[20a]"></a>IRInterface_GetDataSetRecvMaxIdx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_interface.o(i.IRInterface_GetDataSetRecvMaxIdx))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[589]"></a>IRInterface_GetDataSetTransmitMaxIdx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_interface.o(i.IRInterface_GetDataSetTransmitMaxIdx))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1be]"></a>IRInterface_IsTransmitBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_interface.o(i.IRInterface_IsTransmitBusy))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>IRInterface_PrepareDataToSend</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ir_interface.o(i.IRInterface_PrepareDataToSend))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
</UL>

<P><STRONG><a name="[1d8]"></a>IRInterface_SetIrTxState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ir_interface.o(i.IRInterface_SetIrTxState))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = IRInterface_SetIrTxState &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitCompleted
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Task
</UL>

<P><STRONG><a name="[44]"></a>IRInterface_TransmitCompleted</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ir_interface.o(i.IRInterface_TransmitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = IRInterface_TransmitCompleted &rArr; app_led_animation_trigger &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_SetIrTxState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_interface.o(i.IRInterface_TransmitIR)
</UL>
<P><STRONG><a name="[1da]"></a>IRInterface_TransmitIR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ir_interface.o(i.IRInterface_TransmitIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IRInterface_TransmitIR &rArr; ir_lib_init &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Trigger
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1de]"></a>IR_ConstructDeviceType</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ir_deviceconstructor.o(i.IR_ConstructDeviceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = IR_ConstructDeviceType &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructSpecificDeviceType
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Init
</UL>

<P><STRONG><a name="[fc]"></a>IR_ConstructSpecificDeviceType</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ir_deviceconstructor.o(i.IR_ConstructSpecificDeviceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IR_ConstructSpecificDeviceType
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructDeviceType
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[70]"></a>IR_DecodeRawFrameToUserCmd_Funiki</STRONG> (Thumb, 64 bytes, Stack size 704 bytes, ir_dataconverter_funiki.o(i.IR_DecodeRawFrameToUserCmd_Funiki))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = IR_DecodeRawFrameToUserCmd_Funiki &rArr; IR_DecodeBitToByteFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToBit_Funiki
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeBitToByteFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>IR_DecodeRawFrameToUserCmd_Hitachi</STRONG> (Thumb, 200 bytes, Stack size 704 bytes, ir_dataconverter-hitachi.o(i.IR_DecodeRawFrameToUserCmd_Hitachi))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = IR_DecodeRawFrameToUserCmd_Hitachi &rArr; ac_control_update_status_to_payload &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToBit_Hitachi
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeBitToByteFrame
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>IR_DecodeRawFrameToUserCmd_OG104AC</STRONG> (Thumb, 64 bytes, Stack size 704 bytes, ir_dataconverter_og104ac.o(i.IR_DecodeRawFrameToUserCmd_OG104AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = IR_DecodeRawFrameToUserCmd_OG104AC &rArr; IR_DecodeBitToByteFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToBit_OG104AC
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeBitToByteFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>IR_DecodeRawFrameToUserCmd_Olimpia136AC</STRONG> (Thumb, 64 bytes, Stack size 704 bytes, ir_dataconverter_olimpia136ac.o(i.IR_DecodeRawFrameToUserCmd_Olimpia136AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = IR_DecodeRawFrameToUserCmd_Olimpia136AC &rArr; IR_DecodeBitToByteFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToBit_Olimpia136AC
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeBitToByteFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>IR_EncodeUserCmdToIRProtocol_Funiki</STRONG> (Thumb, 40 bytes, Stack size 576 bytes, ir_dataconverter_funiki.o(i.IR_EncodeUserCmdToIRProtocol_Funiki))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = IR_EncodeUserCmdToIRProtocol_Funiki &rArr; IR_EncodeByteToBitForm_Funiki
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeByteToBitForm_Funiki
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>IR_EncodeUserCmdToIRProtocol_Hitachi</STRONG> (Thumb, 202 bytes, Stack size 576 bytes, ir_dataconverter-hitachi.o(i.IR_EncodeUserCmdToIRProtocol_Hitachi))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = IR_EncodeUserCmdToIRProtocol_Hitachi &rArr; IR_EncodeByteToBitForm_Hitachi
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeByteToBitForm_Hitachi
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DetectUserCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>IR_EncodeUserCmdToIRProtocol_OG104AC</STRONG> (Thumb, 40 bytes, Stack size 576 bytes, ir_dataconverter_og104ac.o(i.IR_EncodeUserCmdToIRProtocol_OG104AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = IR_EncodeUserCmdToIRProtocol_OG104AC &rArr; IR_EncodeByteToBitForm_OG104AC
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeByteToBitForm_OG104AC
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>IR_EncodeUserCmdToIRProtocol_Olimpia136AC</STRONG> (Thumb, 40 bytes, Stack size 576 bytes, ir_dataconverter_olimpia136ac.o(i.IR_EncodeUserCmdToIRProtocol_Olimpia136AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = IR_EncodeUserCmdToIRProtocol_Olimpia136AC &rArr; IR_EncodeByteToBitForm_Olimpia136AC
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeByteToBitForm_Olimpia136AC
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>IR_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ir_common.o(i.IR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IR_Init &rArr; IR_ConstructDeviceType &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructDeviceType
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>IR_PinClear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir_hal.o(i.IR_PinClear))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[202]"></a>IR_TX_WDT_Task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ir_interface.o(i.IR_TX_WDT_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IR_TX_WDT_Task &rArr; IRInterface_SetIrTxState &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_SetIrTxState
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[2b5]"></a>IR_TX_WDT_Tick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_interface.o(i.IR_TX_WDT_Tick))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[1db]"></a>IR_TX_WDT_Trigger</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ir_interface.o(i.IR_TX_WDT_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IR_TX_WDT_Trigger &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitIR
</UL>

<P><STRONG><a name="[204]"></a>IR_Task</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, ir_common.o(i.IR_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = IR_Task &rArr; IRInterface_DetectDeviceType &rArr; isPanasonicAcHeader &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructSpecificDeviceType
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_IR_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_GetDataSetRecvMaxIdx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_Decode
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_PinClear
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_deinit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ac_type_detection_enabled
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_set_signal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_trigger
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[71]"></a>IsEnableIrTx_Funiki</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter_funiki.o(i.IsEnableIrTx_Funiki))
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>IsEnableIrTx_Hitachi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter-hitachi.o(i.IsEnableIrTx_Hitachi))
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>IsEnableIrTx_OG104AC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter_og104ac.o(i.IsEnableIrTx_OG104AC))
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>IsEnableIrTx_Olimpia136AC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter_olimpia136ac.o(i.IsEnableIrTx_Olimpia136AC))
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[417]"></a>LG_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_lg.o(i.LG_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[41a]"></a>LG_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_lg.o(i.LG_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[217]"></a>LG_getModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_lg.o(i.LG_getModel))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setFan
</UL>

<P><STRONG><a name="[416]"></a>LG_getPower</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_lg.o(i.LG_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[210]"></a>LG_getRaw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_lg.o(i.LG_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LG_getRaw &rArr; LG_checksum &rArr; LG_calcChecksum &rArr; sumNibbles_64
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[419]"></a>LG_getSwingV</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_lg.o(i.LG_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[211]"></a>LG_getTemp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ir_lg.o(i.LG_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LG_getTemp &rArr; _isNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isNormal
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
</UL>

<P><STRONG><a name="[2d6]"></a>LG_isLightToggle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_lg.o(i.LG_isLightToggle))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB74955603
</UL>

<P><STRONG><a name="[2d7]"></a>LG_isSwing</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_lg.o(i.LG_isSwing))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isNormal
</UL>

<P><STRONG><a name="[222]"></a>LG_isSwingH</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_lg.o(i.LG_isSwingH))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB73757604
</UL>

<P><STRONG><a name="[21e]"></a>LG_isSwingV</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_lg.o(i.LG_isSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB74955603
</UL>

<P><STRONG><a name="[220]"></a>LG_isVaneSwingV</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_lg.o(i.LG_isVaneSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB73757604
</UL>

<P><STRONG><a name="[213]"></a>LG_recv</STRONG> (Thumb, 468 bytes, Stack size 104 bytes, ir_lg.o(i.LG_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LG_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumNibbles_64
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[214]"></a>LG_send</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, ir_lg.o(i.LG_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LG_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_send2
</UL>

<P><STRONG><a name="[215]"></a>LG_send2</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, ir_lg.o(i.LG_send2))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LG_send2 &rArr; LG_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_send
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[216]"></a>LG_setFan</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, ir_lg.o(i.LG_setFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LG_setFan
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getModel
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[4a6]"></a>LG_setMode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ir_lg.o(i.LG_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[21c]"></a>LG_setModel</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ir_lg.o(i.LG_setModel))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
</UL>

<P><STRONG><a name="[218]"></a>LG_setPower</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ir_lg.o(i.LG_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LG_setPower &rArr; LG_setTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setTemp
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[21b]"></a>LG_setRaw</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ir_lg.o(i.LG_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LG_setRaw &rArr; LG_getTemp &rArr; _isNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setModel
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isVaneSwingV
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isSwingV
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isSwingH
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getTemp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB74955603
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB73757604
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getVaneCode
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[219]"></a>LG_setTemp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ir_lg.o(i.LG_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LG_setTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setPower
</UL>

<P><STRONG><a name="[225]"></a>L_sqr_ll</STRONG> (Thumb, 1852 bytes, Stack size 32 bytes, fraclib.o(i.L_sqr_ll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L_sqr_ll
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_extract_hi
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
</UL>

<P><STRONG><a name="[41e]"></a>Mitsubishi112_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[421]"></a>Mitsubishi112_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[41c]"></a>Mitsubishi112_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[229]"></a>Mitsubishi112_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_mitsubishi112.o(i.Mitsubishi112_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Mitsubishi112_getRaw &rArr; Mitsubishi112_checksum &rArr; Mitsubishi112_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_send
</UL>

<P><STRONG><a name="[420]"></a>Mitsubishi112_getSwingV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[41d]"></a>Mitsubishi112_getTemp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[22a]"></a>Mitsubishi112_recv</STRONG> (Thumb, 282 bytes, Stack size 104 bytes, ir_mitsubishi112.o(i.Mitsubishi112_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Mitsubishi112_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[22c]"></a>Mitsubishi112_send</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, ir_mitsubishi112.o(i.Mitsubishi112_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Mitsubishi112_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[4ad]"></a>Mitsubishi112_setFan</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[4ab]"></a>Mitsubishi112_setMode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[4a8]"></a>Mitsubishi112_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[22d]"></a>Mitsubishi112_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_mitsubishi112.o(i.Mitsubishi112_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mitsubishi112_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[4ae]"></a>Mitsubishi112_setSwingV</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_setSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[4a9]"></a>Mitsubishi112_setTemp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[425]"></a>Mitsubishi136_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[428]"></a>Mitsubishi136_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[423]"></a>Mitsubishi136_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[22e]"></a>Mitsubishi136_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_mitsubishi136.o(i.Mitsubishi136_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mitsubishi136_getRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_send
</UL>

<P><STRONG><a name="[427]"></a>Mitsubishi136_getSwingV</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[424]"></a>Mitsubishi136_getTemp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[230]"></a>Mitsubishi136_recv</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, ir_mitsubishi136.o(i.Mitsubishi136_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Mitsubishi136_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[232]"></a>Mitsubishi136_send</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, ir_mitsubishi136.o(i.Mitsubishi136_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Mitsubishi136_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[4b4]"></a>Mitsubishi136_setFan</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[4b2]"></a>Mitsubishi136_setMode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[4af]"></a>Mitsubishi136_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[233]"></a>Mitsubishi136_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_mitsubishi136.o(i.Mitsubishi136_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mitsubishi136_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[4b5]"></a>Mitsubishi136_setSwingV</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_setSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[4b0]"></a>Mitsubishi136_setTemp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[235]"></a>Mitsubishi144_checksum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir_mitsubishi144.o(i.Mitsubishi144_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mitsubishi144_checksum &rArr; Mitsubishi144_calculateChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_calculateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getRaw
</UL>

<P><STRONG><a name="[42b]"></a>Mitsubishi144_getFan</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[42e]"></a>Mitsubishi144_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[42a]"></a>Mitsubishi144_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[236]"></a>Mitsubishi144_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_mitsubishi144.o(i.Mitsubishi144_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mitsubishi144_getRaw &rArr; Mitsubishi144_checksum &rArr; Mitsubishi144_calculateChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_send
</UL>

<P><STRONG><a name="[237]"></a>Mitsubishi144_getTemp</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ir_mitsubishi144.o(i.Mitsubishi144_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Mitsubishi144_getTemp &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[42d]"></a>Mitsubishi144_getVane</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_getVane))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[238]"></a>Mitsubishi144_recv</STRONG> (Thumb, 286 bytes, Stack size 248 bytes, ir_mitsubishi144.o(i.Mitsubishi144_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = Mitsubishi144_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_validChecksum
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[23a]"></a>Mitsubishi144_send</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, ir_mitsubishi144.o(i.Mitsubishi144_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Mitsubishi144_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[4ba]"></a>Mitsubishi144_setFan</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[4b8]"></a>Mitsubishi144_setMode</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[4b6]"></a>Mitsubishi144_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[23b]"></a>Mitsubishi144_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_mitsubishi144.o(i.Mitsubishi144_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mitsubishi144_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[23c]"></a>Mitsubishi144_setTemp</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, ir_mitsubishi144.o(i.Mitsubishi144_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Mitsubishi144_setTemp &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[4bb]"></a>Mitsubishi144_setVane</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_setVane))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[24c]"></a>Mitsubishi152_checkZmsSig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_checkZmsSig))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_recv
</UL>

<P><STRONG><a name="[23f]"></a>Mitsubishi152_checksum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mitsubishi152_checksum &rArr; invertBytePairs
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertBytePairs
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getRaw
</UL>

<P><STRONG><a name="[4bf]"></a>Mitsubishi152_convertFan</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[247]"></a>Mitsubishi152_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_convertMode
</UL>

<P><STRONG><a name="[432]"></a>Mitsubishi152_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[435]"></a>Mitsubishi152_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[430]"></a>Mitsubishi152_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[241]"></a>Mitsubishi152_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mitsubishi152_getRaw &rArr; Mitsubishi152_checksum &rArr; invertBytePairs
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[434]"></a>Mitsubishi152_getSwingVertical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[431]"></a>Mitsubishi152_getTemp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c0]"></a>Mitsubishi152_setFan</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4be]"></a>Mitsubishi152_setMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4bc]"></a>Mitsubishi152_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[242]"></a>Mitsubishi152_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mitsubishi152_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c1]"></a>Mitsubishi152_setSwingVertical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_setSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4bd]"></a>Mitsubishi152_setTemp</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[433]"></a>Mitsubishi152_toCommonFanSpeed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[436]"></a>Mitsubishi152_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[243]"></a>Mitsubishi152_validChecksum</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ir_mitsubishiheavy.o(i.Mitsubishi152_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mitsubishi152_validChecksum &rArr; checkInvertedBytePairs
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInvertedBytePairs
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_recv
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_validChecksum
</UL>

<P><STRONG><a name="[24b]"></a>Mitsubishi88_checkZjsSig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_checkZjsSig))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_recv
</UL>

<P><STRONG><a name="[245]"></a>Mitsubishi88_checksum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mitsubishi88_checksum &rArr; invertBytePairs
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertBytePairs
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getRaw
</UL>

<P><STRONG><a name="[4c5]"></a>Mitsubishi88_convertFan</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[246]"></a>Mitsubishi88_convertMode</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_convertMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Mitsubishi88_convertMode
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_convertMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[43a]"></a>Mitsubishi88_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[43d]"></a>Mitsubishi88_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[438]"></a>Mitsubishi88_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[248]"></a>Mitsubishi88_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mitsubishi88_getRaw &rArr; Mitsubishi88_checksum &rArr; invertBytePairs
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[43c]"></a>Mitsubishi88_getSwingVertical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[439]"></a>Mitsubishi88_getTemp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c6]"></a>Mitsubishi88_setFan</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c4]"></a>Mitsubishi88_setMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c2]"></a>Mitsubishi88_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[437]"></a>Mitsubishi88_setRaw</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_setRaw))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c7]"></a>Mitsubishi88_setSwingVertical</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_setSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[4c3]"></a>Mitsubishi88_setTemp</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[43b]"></a>Mitsubishi88_toCommonFanSpeed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[249]"></a>Mitsubishi88_validChecksum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ir_mitsubishiheavy.o(i.Mitsubishi88_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mitsubishi88_validChecksum &rArr; Mitsubishi152_validChecksum &rArr; checkInvertedBytePairs
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_recv
</UL>

<P><STRONG><a name="[24a]"></a>MitsubishiHeavy_recv</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, ir_mitsubishiheavy.o(i.MitsubishiHeavy_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = MitsubishiHeavy_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_validChecksum
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_checkZjsSig
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_validChecksum
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_checkZmsSig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[24d]"></a>MitsubishiHeavy_send</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, ir_mitsubishiheavy.o(i.MitsubishiHeavy_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MitsubishiHeavy_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
</UL>

<P><STRONG><a name="[1d2]"></a>MitsubishiHeavy_set152AcTypes</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_mitsubishiheavy.o(i.MitsubishiHeavy_set152AcTypes))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[18]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[448]"></a>PanasonicAc32_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[44b]"></a>PanasonicAc32_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[446]"></a>PanasonicAc32_getPowerToggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_getPowerToggle))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[253]"></a>PanasonicAc32_getRaw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_getRaw))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_send
</UL>

<P><STRONG><a name="[44a]"></a>PanasonicAc32_getSwingVertical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[447]"></a>PanasonicAc32_getTemp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[251]"></a>PanasonicAc32_recv</STRONG> (Thumb, 548 bytes, Stack size 144 bytes, ir_panasonic32.o(i.PanasonicAc32_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = PanasonicAc32_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[252]"></a>PanasonicAc32_send</STRONG> (Thumb, 410 bytes, Stack size 144 bytes, ir_panasonic32.o(i.PanasonicAc32_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = PanasonicAc32_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_getRaw
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[4d1]"></a>PanasonicAc32_setFan</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[4cf]"></a>PanasonicAc32_setMode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[4cc]"></a>PanasonicAc32_setPowerToggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_setPowerToggle))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[445]"></a>PanasonicAc32_setRaw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_setRaw))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[4d2]"></a>PanasonicAc32_setSwingVertical</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_setSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[4cd]"></a>PanasonicAc32_setTemp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[254]"></a>PanasonicAc_Checksum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir_panasonic.o(i.PanasonicAc_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PanasonicAc_Checksum &rArr; PanasonicAc_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getRaw
</UL>

<P><STRONG><a name="[255]"></a>PanasonicAc_calcChecksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ir_panasonic.o(i.PanasonicAc_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PanasonicAc_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_Checksum
</UL>

<P><STRONG><a name="[4ca]"></a>PanasonicAc_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
</UL>

<P><STRONG><a name="[4c9]"></a>PanasonicAc_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
</UL>

<P><STRONG><a name="[440]"></a>PanasonicAc_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[443]"></a>PanasonicAc_getMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[43e]"></a>PanasonicAc_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[256]"></a>PanasonicAc_getRaw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_panasonic.o(i.PanasonicAc_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PanasonicAc_getRaw &rArr; PanasonicAc_Checksum &rArr; PanasonicAc_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_send
</UL>

<P><STRONG><a name="[442]"></a>PanasonicAc_getSwingVertical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_getSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[43f]"></a>PanasonicAc_getTemp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[257]"></a>PanasonicAc_recv</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, ir_panasonic.o(i.PanasonicAc_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = PanasonicAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[259]"></a>PanasonicAc_send</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, ir_panasonic.o(i.PanasonicAc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PanasonicAc_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
</UL>

<P><STRONG><a name="[25a]"></a>PanasonicAc_setFan</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ir_panasonic.o(i.PanasonicAc_setFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = PanasonicAc_setFan &rArr;  PanasonicAc_setFan (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setFan
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setFan
</UL>

<P><STRONG><a name="[25b]"></a>PanasonicAc_setMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ir_panasonic.o(i.PanasonicAc_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PanasonicAc_setMode &rArr; PanasonicAc_setTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
</UL>

<P><STRONG><a name="[4c8]"></a>PanasonicAc_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
</UL>

<P><STRONG><a name="[25d]"></a>PanasonicAc_setRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_panasonic.o(i.PanasonicAc_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PanasonicAc_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[4cb]"></a>PanasonicAc_setSwingVertical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_setSwingVertical))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
</UL>

<P><STRONG><a name="[25c]"></a>PanasonicAc_setTemp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ir_panasonic.o(i.PanasonicAc_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PanasonicAc_setTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setMode
</UL>

<P><STRONG><a name="[441]"></a>PanasonicAc_toCommonFanSpeed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[444]"></a>PanasonicAc_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_panasonic.o(i.PanasonicAc_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
</UL>

<P><STRONG><a name="[258]"></a>PanasonicAc_validChecksum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ir_panasonic.o(i.PanasonicAc_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PanasonicAc_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_recv
</UL>

<P><STRONG><a name="[698]"></a>RINGBUF_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(i.RINGBUF_Init))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[621]"></a>RINGBUF_Put</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ringbuf.o(i.RINGBUF_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[29]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[260]"></a>ReetechAc_checksum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getRaw
</UL>

<P><STRONG><a name="[4d7]"></a>ReetechAc_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[4d5]"></a>ReetechAc_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[450]"></a>ReetechAc_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[453]"></a>ReetechAc_getMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[44e]"></a>ReetechAc_getPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[25f]"></a>ReetechAc_getRaw</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ir_reetech.o(i.ReetechAc_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ReetechAc_getRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[452]"></a>ReetechAc_getSwingV</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[44f]"></a>ReetechAc_getTemp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[261]"></a>ReetechAc_recv</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, ir_reetech.o(i.ReetechAc_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ReetechAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Reetech
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[263]"></a>ReetechAc_send</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, ir_reetech.o(i.ReetechAc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReetechAc_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[4da]"></a>ReetechAc_setButton</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setButton))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[4d8]"></a>ReetechAc_setFan</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[4d6]"></a>ReetechAc_setMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[4d3]"></a>ReetechAc_setPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[44d]"></a>ReetechAc_setRaw</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setRaw))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Reetech
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[4d9]"></a>ReetechAc_setSwingV</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[4d4]"></a>ReetechAc_setTemp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
</UL>

<P><STRONG><a name="[451]"></a>ReetechAc_toCommonFanSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[454]"></a>ReetechAc_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
</UL>

<P><STRONG><a name="[262]"></a>ReetechAc_validChecksum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ir_reetech.o(i.ReetechAc_validChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_recv
</UL>

<P><STRONG><a name="[1f]"></a>SAADC_IRQHandler</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, nrfx_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[26a]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[2e3]"></a>SHTC3_raw2Percent</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, shtc3.o(i.SHTC3_raw2Percent))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_values
</UL>

<P><STRONG><a name="[26e]"></a>SMARTHOME_CalcAuxiliary</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, smarthome_meter.o(i.SMARTHOME_CalcAuxiliary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SMARTHOME_CalcAuxiliary &rArr; LL_iir_1ord &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRACLIB_FFMUL32
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_sqr_ll
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_extract_hi
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord_ll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_add
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCallback
</UL>

<P><STRONG><a name="[270]"></a>SMARTHOME_CalcWattHours</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, smarthome_meter.o(i.SMARTHOME_CalcWattHours))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = SMARTHOME_CalcWattHours &rArr; CalcEnergy &rArr; LL_iir_1ord &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_extract_hi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCallback
</UL>

<P><STRONG><a name="[271]"></a>SMARTHOME_ReadResults</STRONG> (Thumb, 484 bytes, Stack size 96 bytes, smarthome_meter.o(i.SMARTHOME_ReadResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SMARTHOME_ReadResults &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_extract_hi
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_meter_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
</UL>

<P><STRONG><a name="[272]"></a>SMARTHOME_RemoveDcBias</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, smarthome_meter.o(i.SMARTHOME_RemoveDcBias))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SMARTHOME_RemoveDcBias &rArr; LL_iir_1ord_ll &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord_ll
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCallback
</UL>

<P><STRONG><a name="[1b]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; twi_irq_handler &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twi.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; rbc_mesh_SWI0_IRQHandler &rArr; async_event_execute &rArr; mesh_srv_packet_process &rArr; rbc_mesh_event_handler &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_SWI0_IRQHandler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>S_div_llll</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, fraclib.o(i.S_div_llll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = S_div_llll
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[277]"></a>Samsung_calcSectionChecksum</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ir_samsung.o(i.Samsung_calcSectionChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Samsung_calcSectionChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countBits_8
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countBits_64
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_validChecksum
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_checksum
</UL>

<P><STRONG><a name="[27a]"></a>Samsung_checksum</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ir_samsung.o(i.Samsung_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Samsung_checksum &rArr; Samsung_calcSectionChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_calcSectionChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getRaw
</UL>

<P><STRONG><a name="[4df]"></a>Samsung_convertFan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[4dd]"></a>Samsung_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[457]"></a>Samsung_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[45a]"></a>Samsung_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[455]"></a>Samsung_getPower</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[27b]"></a>Samsung_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_samsung.o(i.Samsung_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Samsung_getRaw &rArr; Samsung_checksum &rArr; Samsung_calcSectionChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[284]"></a>Samsung_getSectionChecksum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_getSectionChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_validChecksum
</UL>

<P><STRONG><a name="[459]"></a>Samsung_getSwing</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_getSwing))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[456]"></a>Samsung_getTemp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[27c]"></a>Samsung_recv</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, ir_samsung.o(i.Samsung_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Samsung_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_validChecksum
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamsung
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[27e]"></a>Samsung_send</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, ir_samsung.o(i.Samsung_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Samsung_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_sendOn
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_sendOff
</UL>

<P><STRONG><a name="[27f]"></a>Samsung_sendOff</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ir_samsung.o(i.Samsung_sendOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Samsung_sendOff &rArr; Samsung_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[280]"></a>Samsung_sendOn</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ir_samsung.o(i.Samsung_sendOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Samsung_sendOn &rArr; Samsung_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[4e0]"></a>Samsung_setFan</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[4de]"></a>Samsung_setMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[4db]"></a>Samsung_setPower</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[281]"></a>Samsung_setRaw</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ir_samsung.o(i.Samsung_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Samsung_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Samsung_getOnTimer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Samsung_getOffTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[4e1]"></a>Samsung_setSwing</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_setSwing))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[4dc]"></a>Samsung_setTemp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
</UL>

<P><STRONG><a name="[458]"></a>Samsung_toCommonFanSpeed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[45b]"></a>Samsung_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_samsung.o(i.Samsung_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
</UL>

<P><STRONG><a name="[27d]"></a>Samsung_validChecksum</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ir_samsung.o(i.Samsung_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Samsung_validChecksum &rArr; Samsung_calcSectionChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getSectionChecksum
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_calcSectionChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_recv
</UL>

<P><STRONG><a name="[286]"></a>Sanyo_checksum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_sanyo.o(i.Sanyo_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sanyo_checksum &rArr; Sanyo_calcChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getRaw
</UL>

<P><STRONG><a name="[45f]"></a>Sanyo_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[462]"></a>Sanyo_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[45d]"></a>Sanyo_getPower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[287]"></a>Sanyo_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_sanyo.o(i.Sanyo_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sanyo_getRaw &rArr; Sanyo_checksum &rArr; Sanyo_calcChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[461]"></a>Sanyo_getSwingV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[45e]"></a>Sanyo_getTemp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[288]"></a>Sanyo_recv</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, ir_sanyo.o(i.Sanyo_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Sanyo_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[28a]"></a>Sanyo_send</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, ir_sanyo.o(i.Sanyo_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Sanyo_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[4e7]"></a>Sanyo_setFan</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[4e5]"></a>Sanyo_setMode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[4e2]"></a>Sanyo_setPower</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[45c]"></a>Sanyo_setRaw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_setRaw))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[4e8]"></a>Sanyo_setSwingV</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_setSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[4e3]"></a>Sanyo_setTemp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[72]"></a>SetIrTxState_Funiki</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter_funiki.o(i.SetIrTxState_Funiki))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>SetIrTxState_Hitachi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter-hitachi.o(i.SetIrTxState_Hitachi))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SetIrTxState_OG104AC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter_og104ac.o(i.SetIrTxState_OG104AC))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>SetIrTxState_Olimpia136AC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_dataconverter_olimpia136ac.o(i.SetIrTxState_Olimpia136AC))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeBitToRawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>Sharp_clearPowerSpecial</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_sharp.o(i.Sharp_clearPowerSpecial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sharp_clearPowerSpecial
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPowerSpecial
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setTemp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setMode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setFan
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setClean
</UL>

<P><STRONG><a name="[464]"></a>Sharp_getFan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[29d]"></a>Sharp_getMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setSwingV
</UL>

<P><STRONG><a name="[291]"></a>Sharp_getModel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_getModel))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_toCommonMode
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_toCommonFanSpeed
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setTemp
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setRaw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setMode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getTemp
</UL>

<P><STRONG><a name="[29a]"></a>Sharp_getPower</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPower
</UL>

<P><STRONG><a name="[28f]"></a>Sharp_getRaw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ir_sharp.o(i.Sharp_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Sharp_getRaw &rArr; Sharp_checksum &rArr; Sharp_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
</UL>

<P><STRONG><a name="[465]"></a>Sharp_getSwingV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_getSwingV))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[290]"></a>Sharp_getTemp</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ir_sharp.o(i.Sharp_getTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sharp_getTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[292]"></a>Sharp_recv</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, ir_sharp.o(i.Sharp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Sharp_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[294]"></a>Sharp_send</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, ir_sharp.o(i.Sharp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Sharp_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
</UL>

<P><STRONG><a name="[295]"></a>Sharp_setClean</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ir_sharp.o(i.Sharp_setClean))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = Sharp_setClean &rArr;  Sharp_setPower (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPower
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setMode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setFan
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_clearPowerSpecial
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPower
</UL>

<P><STRONG><a name="[298]"></a>Sharp_setFan</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_setFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sharp_setFan &rArr; Sharp_clearPowerSpecial
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_clearPowerSpecial
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setMode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setClean
</UL>

<P><STRONG><a name="[296]"></a>Sharp_setMode</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sharp_setMode &rArr; Sharp_setTemp &rArr; Sharp_clearPowerSpecial
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setTemp
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setFan
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_clearPowerSpecial
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setClean
</UL>

<P><STRONG><a name="[297]"></a>Sharp_setPower</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sharp_setPower &rArr; Sharp_setClean &rArr;  Sharp_setPower (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPowerSpecial
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setClean
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getPower
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setClean
</UL>

<P><STRONG><a name="[28e]"></a>Sharp_setPowerSpecial</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_setPowerSpecial))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPower
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_clearPowerSpecial
</UL>

<P><STRONG><a name="[29b]"></a>Sharp_setRaw</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sharp_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[29c]"></a>Sharp_setSwingV</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ir_sharp.o(i.Sharp_setSwingV))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = Sharp_setSwingV &rArr;  Sharp_setSwingV (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setSwingV
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setSwingV
</UL>

<P><STRONG><a name="[299]"></a>Sharp_setTemp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sharp_setTemp &rArr; Sharp_clearPowerSpecial
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_clearPowerSpecial
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setMode
</UL>

<P><STRONG><a name="[29e]"></a>Sharp_toCommonFanSpeed</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ir_sharp.o(i.Sharp_toCommonFanSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sharp_toCommonFanSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[29f]"></a>Sharp_toCommonMode</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, ir_sharp.o(i.Sharp_toCommonMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sharp_toCommonMode
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3e]"></a>SystemInit</STRONG> (Thumb, 176 bytes, Stack size 4 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit &rArr; nvmc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_wait
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TIMER1_IRQHandler &rArr; Task_1s &rArr; app_alarm_task &rArr; protocol_send_schedule_event_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_tick_ms_run
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_task
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_tick
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_task
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_blink_tick
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ir_lib.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER4_IRQHandler &rArr; ir_lib_tx_done_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_count_calculate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_tx_done_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2ac]"></a>TIME_FromSec</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, sys_time.o(i.TIME_FromSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[2a3]"></a>Task_1s</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, main.o(i.Task_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Task_1s &rArr; app_alarm_task &rArr; protocol_send_schedule_event_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Tick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_task
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_fsm_main_loop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_tick_s_run
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_transmit_tick_loop
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[2b8]"></a>ToshibaAc_calcChecksum</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ir_toshiba.o(i.ToshibaAc_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ToshibaAc_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_validChecksum
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_checksum
</UL>

<P><STRONG><a name="[2b9]"></a>ToshibaAc_checksum</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ir_toshiba.o(i.ToshibaAc_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ToshibaAc_checksum &rArr; ToshibaAc_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertBytePairs
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getStateLength
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getRaw
</UL>

<P><STRONG><a name="[4ed]"></a>ToshibaAc_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[4ec]"></a>ToshibaAc_convertMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[467]"></a>ToshibaAc_getFan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_getFan))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[2be]"></a>ToshibaAc_getInternalStateLength</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_getInternalStateLength))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_validChecksum
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getStateLength
</UL>

<P><STRONG><a name="[2bc]"></a>ToshibaAc_getMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_getMode))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setRaw
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getPower
</UL>

<P><STRONG><a name="[2bb]"></a>ToshibaAc_getPower</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ir_toshiba.o(i.ToshibaAc_getPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ToshibaAc_getPower
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getMode
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setPower
</UL>

<P><STRONG><a name="[2bd]"></a>ToshibaAc_getRaw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_toshiba.o(i.ToshibaAc_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ToshibaAc_getRaw &rArr; ToshibaAc_checksum &rArr; ToshibaAc_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getStateLength
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[2ba]"></a>ToshibaAc_getStateLength</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ir_toshiba.o(i.ToshibaAc_getStateLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ToshibaAc_getStateLength
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getInternalStateLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setSwing
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getRaw
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_checksum
</UL>

<P><STRONG><a name="[469]"></a>ToshibaAc_getSwing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_getSwing))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[466]"></a>ToshibaAc_getTemp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[2bf]"></a>ToshibaAc_recv</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, ir_toshiba.o(i.ToshibaAc_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ToshibaAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[2c1]"></a>ToshibaAc_send</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, ir_toshiba.o(i.ToshibaAc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ToshibaAc_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[4ee]"></a>ToshibaAc_setFan</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[2c2]"></a>ToshibaAc_setMode</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, ir_toshiba.o(i.ToshibaAc_setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ToshibaAc_setMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setStateLength
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setPower
</UL>

<P><STRONG><a name="[2c4]"></a>ToshibaAc_setPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ir_toshiba.o(i.ToshibaAc_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ToshibaAc_setPower &rArr; ToshibaAc_setMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setMode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getPower
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[2c5]"></a>ToshibaAc_setRaw</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ir_toshiba.o(i.ToshibaAc_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ToshibaAc_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getMode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[2c3]"></a>ToshibaAc_setStateLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_setStateLength))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setMode
</UL>

<P><STRONG><a name="[2c6]"></a>ToshibaAc_setSwing</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ir_toshiba.o(i.ToshibaAc_setSwing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ToshibaAc_setSwing &rArr; ToshibaAc_getStateLength
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getStateLength
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[4eb]"></a>ToshibaAc_setTemp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
</UL>

<P><STRONG><a name="[468]"></a>ToshibaAc_toCommonFanSpeed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[46a]"></a>ToshibaAc_toCommonMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ir_toshiba.o(i.ToshibaAc_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
</UL>

<P><STRONG><a name="[2c0]"></a>ToshibaAc_validChecksum</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ir_toshiba.o(i.ToshibaAc_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ToshibaAc_validChecksum &rArr; ToshibaAc_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInvertedBytePairs
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getInternalStateLength
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_recv
</UL>

<P><STRONG><a name="[1a]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c7]"></a>VestelAc_calcChecksum</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ir_vestel.o(i.VestelAc_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VestelAc_calcChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countBits_64
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_validChecksum
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_checksum
</UL>

<P><STRONG><a name="[2c8]"></a>VestelAc_checksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ir_vestel.o(i.VestelAc_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VestelAc_checksum &rArr; VestelAc_calcChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_getRaw
</UL>

<P><STRONG><a name="[4f3]"></a>VestelAc_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[4f1]"></a>VestelAc_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[2cd]"></a>VestelAc_getPower</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_getPower))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_send
</UL>

<P><STRONG><a name="[2c9]"></a>VestelAc_getRaw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_vestel.o(i.VestelAc_getRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = VestelAc_getRaw &rArr; VestelAc_checksum &rArr; VestelAc_calcChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[46d]"></a>VestelAc_getSwing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_getSwing))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
</UL>

<P><STRONG><a name="[46b]"></a>VestelAc_getTemp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_getTemp))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
</UL>

<P><STRONG><a name="[2d0]"></a>VestelAc_isTimeCommand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_isTimeCommand))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setRaw
</UL>

<P><STRONG><a name="[2ca]"></a>VestelAc_recv</STRONG> (Thumb, 264 bytes, Stack size 96 bytes, ir_vestel.o(i.VestelAc_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = VestelAc_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isVestelAc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
</UL>

<P><STRONG><a name="[2cc]"></a>VestelAc_send</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, ir_vestel.o(i.VestelAc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VestelAc_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_getPower
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapData
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[4f4]"></a>VestelAc_setFan</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_setFan))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[4f2]"></a>VestelAc_setMode</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_setMode))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[4ef]"></a>VestelAc_setPower</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_setPower))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[2cf]"></a>VestelAc_setRaw</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ir_vestel.o(i.VestelAc_setRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VestelAc_setRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_isTimeCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isVestelAc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
</UL>

<P><STRONG><a name="[4f5]"></a>VestelAc_setSwing</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_setSwing))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[4f0]"></a>VestelAc_setTemp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ir_vestel.o(i.VestelAc_setTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VestelAc_setTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
</UL>

<P><STRONG><a name="[46c]"></a>VestelAc_toCommonFanSpeed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
</UL>

<P><STRONG><a name="[46e]"></a>VestelAc_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_vestel.o(i.VestelAc_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
</UL>

<P><STRONG><a name="[2cb]"></a>VestelAc_validChecksum</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ir_vestel.o(i.VestelAc_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = VestelAc_validChecksum &rArr; VestelAc_calcChecksum &rArr; countBits_64
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_recv
</UL>

<P><STRONG><a name="[ed]"></a>WORD8_TO_WORD32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aes128.o(i.WORD8_TO_WORD32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WORD8_TO_WORD32
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_encrypt
</UL>

<P><STRONG><a name="[51b]"></a>Xtime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aes128.o(i.Xtime))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwd_mcol
</UL>

<P><STRONG><a name="[283]"></a>_Samsung_getOffTimer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_samsung.o(i._Samsung_getOffTimer))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setRaw
</UL>

<P><STRONG><a name="[282]"></a>_Samsung_getOnTimer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ir_samsung.o(i._Samsung_getOnTimer))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setRaw
</UL>

<P><STRONG><a name="[2d2]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6ee]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
</UL>

<P><STRONG><a name="[6ef]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6f0]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2d8]"></a>_matchGeneric</STRONG> (Thumb, 412 bytes, Stack size 112 bytes, irrecv.o(i._matchGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchBytes
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchAtLeast
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_64
</UL>

<P><STRONG><a name="[21a]"></a>_setTemp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_lg.o(i._setTemp))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setTemp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setPower
</UL>

<P><STRONG><a name="[6a8]"></a>_validTolerance</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, irrecv.o(i._validTolerance))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
</UL>

<P><STRONG><a name="[10e]"></a>ac_control_get_status_from_payload</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, app_ac_status.o(i.ac_control_get_status_from_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ac_control_get_status_from_payload &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ac_init
</UL>

<P><STRONG><a name="[1ee]"></a>ac_control_set_fan</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ac_status.o(i.ac_control_set_fan))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
</UL>

<P><STRONG><a name="[1ed]"></a>ac_control_set_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ac_status.o(i.ac_control_set_mode))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
</UL>

<P><STRONG><a name="[1eb]"></a>ac_control_set_power_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_ac_status.o(i.ac_control_set_power_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ac_control_set_power_status &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
</UL>

<P><STRONG><a name="[3dd]"></a>ac_control_set_swing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ac_status.o(i.ac_control_set_swing))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
</UL>

<P><STRONG><a name="[1ec]"></a>ac_control_set_temperature</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ac_status.o(i.ac_control_set_temperature))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
</UL>

<P><STRONG><a name="[1ef]"></a>ac_control_update_status_to_payload</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, app_ac_status.o(i.ac_control_update_status_to_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ac_control_update_status_to_payload &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValueToPos
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_IR_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_timer_event_data
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_schedule_event_data
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
</UL>

<P><STRONG><a name="[2b2]"></a>ac_timer_task</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ac_timer_task.o(i.ac_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ac_timer_task &rArr; protocol_send_timer_event_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task_trigger
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_PrepareDataToSend
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_EncodeBLEToIR
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_timer_event_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_tick
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[2e9]"></a>ac_timer_task_init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ac_timer_task.o(i.ac_timer_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ac_timer_task_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>ac_timer_task_trigger</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ac_timer_task.o(i.ac_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
</UL>

<P><STRONG><a name="[2e8]"></a>ac_timer_tick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ac_timer_task.o(i.ac_timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
</UL>

<P><STRONG><a name="[209]"></a>ac_type_detection_set_signal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac_type_detection_task.o(i.ac_type_detection_set_signal))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[2b3]"></a>ac_type_detection_task</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, ac_type_detection_task.o(i.ac_type_detection_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ac_type_detection_task &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_check_status
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_tick
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_set_signal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[ff]"></a>ac_type_detection_task_trigger</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ac_type_detection_task.o(i.ac_type_detection_task_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ac_type_detection_task_trigger &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[2eb]"></a>ac_type_detection_tick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ac_type_detection_task.o(i.ac_type_detection_tick))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
</UL>

<P><STRONG><a name="[2ec]"></a>adc_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc_task.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = adc_init &rArr; saadc_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ef]"></a>adc_measure_vdd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc_task.o(i.adc_measure_vdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_measure_vdd &rArr; nrfx_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
</UL>

<P><STRONG><a name="[2a4]"></a>adc_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_task.o(i.adc_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_task &rArr; adc_measure_vdd &rArr; nrfx_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_adc_task_enabled
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_measure_vdd
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>adc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc_task.o(i.adc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2f2]"></a>addr_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[2fa]"></a>advertising_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_ble.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = advertising_start &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[688]"></a>afeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc_task.o(i.afeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[2fc]"></a>ah</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[2ff]"></a>app_ac_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_ac_status.o(i.app_ac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_ac_init &rArr; ac_control_get_status_from_payload &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_get_status_from_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>app_alarm_get_config</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, app_alarm.o(i.app_alarm_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_alarm_get_config &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
</UL>

<P><STRONG><a name="[300]"></a>app_alarm_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_alarm.o(i.app_alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_alarm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>app_alarm_set_config</STRONG> (Thumb, 562 bytes, Stack size 24 bytes, app_alarm.o(i.app_alarm_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_alarm_set_config &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
</UL>

<P><STRONG><a name="[2b1]"></a>app_alarm_task</STRONG> (Thumb, 764 bytes, Stack size 56 bytes, app_alarm.o(i.app_alarm_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_alarm_task &rArr; protocol_send_schedule_event_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_get_status_from_payload
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_PrepareDataToSend
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_EncodeBLEToIR
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_schedule_event_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[2a7]"></a>app_blink_tick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_led_animation.o(i.app_blink_tick))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[302]"></a>app_datalog_task</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, app_datalog.o(i.app_datalog_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = app_datalog_task &rArr; dataLogger_Pop &rArr; dbGetDataLogTail &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Pop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_tick_s_reset
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_tick_s_get
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetNumberSaved
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[308]"></a>app_emeter_task</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, app_sensor.o(i.app_emeter_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = app_emeter_task &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_ReadResults
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[52]"></a>app_error_fault_handler</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[30d]"></a>app_error_save_and_stop</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[12a]"></a>app_flash_program_calculate_crc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_config.o(i.app_flash_program_calculate_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_flash_program_calculate_crc &rArr; crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[53c]"></a>app_get_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_mesh.o(i.app_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_btn0_event_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[30f]"></a>app_gpiote_user_enable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_gpiote.o(i.app_gpiote_user_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_gpiote_user_enable &rArr; user_enable &rArr; pin_event_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
</UL>

<P><STRONG><a name="[311]"></a>app_gpiote_user_register</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, app_gpiote.o(i.app_gpiote_user_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = app_gpiote_user_register &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_masks_or
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
</UL>

<P><STRONG><a name="[103]"></a>app_indicator_led_off</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_indicator_led.o(i.app_indicator_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_task
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[102]"></a>app_indicator_led_on</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_indicator_led.o(i.app_indicator_led_on))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_task
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[2a9]"></a>app_led_animation_task</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, app_led_animation.o(i.app_led_animation_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_led_animation_task
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_indicator_led_on
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_indicator_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[2a5]"></a>app_led_animation_tick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_led_animation.o(i.app_led_animation_tick))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>app_led_animation_trigger</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_led_animation.o(i.app_led_animation_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = app_led_animation_trigger &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitCompleted
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_blink_task
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[316]"></a>app_led_blink_task</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_led_animation.o(i.app_led_blink_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = app_led_blink_task &rArr; app_led_animation_trigger &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[114]"></a>app_led_blink_trigger</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_led_animation.o(i.app_led_blink_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_led_blink_trigger &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
</UL>

<P><STRONG><a name="[2a8]"></a>app_led_task</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, app_indicator_led.o(i.app_led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_led_task
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[319]"></a>app_mesh_task</STRONG> (Thumb, 716 bytes, Stack size 88 bytes, app_mesh.o(i.app_mesh_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = app_mesh_task &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_data_transmit_fsm
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_add_packet
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_check_status
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketGet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketAddToList
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketAddToList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[31c]"></a>app_meter_init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, app_sensor.o(i.app_meter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = app_meter_init &rArr; dataLogger_GetLatestValid &rArr; dataLogger_Get &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetLatestValid
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_ReadResults
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>app_rtc_timeout_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.app_rtc_timeout_handler))
<BR>[Address Reference Count : 1]<UL><LI> boards.o(i.timers_init)
</UL>
<P><STRONG><a name="[31e]"></a>app_save_datalog</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, app_datalog.o(i.app_save_datalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = app_save_datalog &rArr; dataLogger_Save &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_control_get_current_task
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[321]"></a>app_sched_execute</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_operation
</UL>

<P><STRONG><a name="[583]"></a>app_sensor_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_sensor.o(i.app_sensor_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[323]"></a>app_sensor_task</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, app_sensor.o(i.app_sensor_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_sensor_task &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[324]"></a>app_set_mode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_mesh.o(i.app_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_set_mode &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_btn0_event_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ae]"></a>app_tick_task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_mesh.o(i.app_tick_task))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[325]"></a>app_timer_cnt_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_cnt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_btn0_event_handler
</UL>

<P><STRONG><a name="[368]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[327]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[32d]"></a>app_timer_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_btn0_event_handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[32f]"></a>app_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_btn0_event_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[331]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[333]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[337]"></a>application_timers_start</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, boards.o(i.application_timers_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = application_timers_start &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>bcdToUint8</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, irutils.o(i.bcdToUint8))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getTemp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getTemp
</UL>

<P><STRONG><a name="[34b]"></a>blcm_link_ctx_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[34d]"></a>ble_advdata_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[356]"></a>ble_advdata_parse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[357]"></a>ble_advdata_search</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[2f9]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[2f8]"></a>ble_advertising_init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_is_valid
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[bb]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[c4]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[2fb]"></a>ble_advertising_start</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_high_duty
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[361]"></a>ble_app_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_ble.o(i.ble_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ble_app_init &rArr; advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ea]"></a>ble_check_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_ble.o(i.ble_check_status))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
</UL>

<P><STRONG><a name="[367]"></a>ble_conn_params_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[34c]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[36a]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_encrypted &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[36c]"></a>ble_conn_state_for_each_set_user_flag</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_for_each_set_user_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[36f]"></a>ble_conn_state_role</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_role &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
</UL>

<P><STRONG><a name="[2fe]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_user_flag_get &rArr; user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_procedure
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
</UL>

<P><STRONG><a name="[33f]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_needed
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_pending_handle
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[369]"></a>ble_conn_state_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
</UL>

<P><STRONG><a name="[372]"></a>ble_dis_init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[f6]"></a>ble_get_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_ble.o(i.ble_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_get_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[f5]"></a>ble_is_connected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_ble.o(i.ble_is_connected))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[381]"></a>ble_nus_data_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ble_nus.o(i.ble_nus_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task
</UL>

<P><STRONG><a name="[382]"></a>ble_nus_init</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_nus_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[be]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[fa]"></a>ble_send_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_ble.o(i.ble_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
</UL>

<P><STRONG><a name="[387]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[388]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[38d]"></a>ble_task</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_ble.o(i.ble_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_task &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ble_transmit_status
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendFromNUSToMesh
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[38f]"></a>boards_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, boards.o(i.boards_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = boards_init &rArr; timers_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>bootloader_start</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.bootloader_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bootloader_start &rArr; interrupts_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[392]"></a>btle_hci_adv_sd_evt_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_advertiser.o(i.btle_hci_adv_sd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = btle_hci_adv_sd_evt_handler &rArr; ctrl_timeslot_order &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_timeslot_order
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_timeslot_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[395]"></a>btn_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, btn.o(i.btn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = btn_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5eb]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[39b]"></a>calcCallback</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, adc_task.o(i.calcCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = calcCallback &rArr; SMARTHOME_CalcWattHours &rArr; CalcEnergy &rArr; LL_iir_1ord &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_RemoveDcBias
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcWattHours
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRACLIB_FFMUL32
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[383]"></a>characteristic_add</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>

<P><STRONG><a name="[244]"></a>checkInvertedBytePairs</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, irutils.o(i.checkInvertedBytePairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkInvertedBytePairs
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_validChecksum
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_validChecksum
</UL>

<P><STRONG><a name="[3ac]"></a>conn_handle_list_get</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[278]"></a>countBits_64</STRONG> (Thumb, 110 bytes, Stack size 36 bytes, irutils.o(i.countBits_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = countBits_64
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_calcSectionChecksum
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_calcChecksum
</UL>

<P><STRONG><a name="[279]"></a>countBits_8</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, irutils.o(i.countBits_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = countBits_8
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_calcSectionChecksum
</UL>

<P><STRONG><a name="[30e]"></a>crc32_compute</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, crc32.o(i.crc32_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc32_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_flash_program_calculate_crc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_report_reset
</UL>

<P><STRONG><a name="[393]"></a>ctrl_timeslot_abort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ts_controller.o(i.ctrl_timeslot_abort))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_hci_adv_sd_evt_handler
</UL>

<P><STRONG><a name="[394]"></a>ctrl_timeslot_order</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ts_controller.o(i.ctrl_timeslot_order))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ctrl_timeslot_order &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_hci_adv_sd_evt_handler
</UL>

<P><STRONG><a name="[39d]"></a>dataLoggerCheckSumCRC16</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, datalogger_userport.o(i.dataLoggerCheckSumCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dataLoggerCheckSumCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDataChecksum
</UL>

<P><STRONG><a name="[3b5]"></a>dataLoggerDriver_Erase</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, datalogger_userport.o(i.dataLoggerDriver_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dataLoggerDriver_Erase &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>

<P><STRONG><a name="[3b6]"></a>dataLoggerDriver_Read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, datalogger_userport.o(i.dataLoggerDriver_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLatestIndexSector
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetDataLogTail
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>

<P><STRONG><a name="[3b8]"></a>dataLoggerDriver_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, datalogger_userport.o(i.dataLoggerDriver_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dataLoggerDriver_Write &rArr; datalog_nrf_use_flash_write &rArr; datalog_nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>

<P><STRONG><a name="[3ba]"></a>dataLogger_Get</STRONG> (Thumb, 166 bytes, Stack size 640 bytes, datalogger_interface.o(i.dataLogger_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = dataLogger_Get &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetCurrentAddress
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbCRCCheckValidData
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetLatestValid
</UL>

<P><STRONG><a name="[31d]"></a>dataLogger_GetLatestValid</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, datalogger_interface.o(i.dataLogger_GetLatestValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = dataLogger_GetLatestValid &rArr; dataLogger_Get &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbShiftRingLogHead
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_meter_init
</UL>

<P><STRONG><a name="[305]"></a>dataLogger_GetNumberSaved</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, datalogger_interface.o(i.dataLogger_GetNumberSaved))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dataLogger_GetNumberSaved &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc_val
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_energy_val
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c1]"></a>dataLogger_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, datalogger_interface.o(i.dataLogger_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dataLogger_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_init
</UL>

<P><STRONG><a name="[306]"></a>dataLogger_Pop</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, datalogger_interface.o(i.dataLogger_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = dataLogger_Pop &rArr; dbGetDataLogTail &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbShiftRingLogTail
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetDataLogTail
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
</UL>

<P><STRONG><a name="[320]"></a>dataLogger_Save</STRONG> (Thumb, 330 bytes, Stack size 664 bytes, datalogger_interface.o(i.dataLogger_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = dataLogger_Save &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetCurrentAddress
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbCRCCheckValidData
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDataChecksum
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Write
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Erase
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc_val
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_energy_val
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_datalog
</UL>

<P><STRONG><a name="[15b]"></a>dataToRaw</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, irsend.o(i.dataToRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_8
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGeneric_64
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_send
</UL>

<P><STRONG><a name="[3c5]"></a>data_transmit_fsm_main_loop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, data_transmit_fsm.o(i.data_transmit_fsm_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = data_transmit_fsm_main_loop &rArr; data_transmit_lookup_transitions
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_transmit_lookup_transitions
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[3c6]"></a>data_transmit_lookup_transitions</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, data_transmit_fsm.o(i.data_transmit_lookup_transitions))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = data_transmit_lookup_transitions
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_transmit_fsm_main_loop
</UL>

<P><STRONG><a name="[2b0]"></a>data_transmit_tick_loop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, data_transmit_fsm.o(i.data_transmit_tick_loop))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[3c7]"></a>datalog_clear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_datalog.o(i.datalog_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = datalog_clear &rArr; datalog_nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_erase
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ca]"></a>datalog_clear_history_sensor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_datalog.o(i.datalog_clear_history_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = datalog_clear_history_sensor &rArr; datalog_nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3cb]"></a>datalog_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_datalog.o(i.datalog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = datalog_init &rArr; datalog_nrf_use_flash_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c9]"></a>datalog_nrf_use_flash_erase</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_datalog.o(i.datalog_nrf_use_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = datalog_nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_wait_for_flash_ready
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_write
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear_history_sensor
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear
</UL>

<P><STRONG><a name="[3cc]"></a>datalog_nrf_use_flash_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_datalog.o(i.datalog_nrf_use_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = datalog_nrf_use_flash_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_print_flash_info
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_init
</UL>

<P><STRONG><a name="[3b7]"></a>datalog_nrf_use_flash_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_datalog.o(i.datalog_nrf_use_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
</UL>

<P><STRONG><a name="[3b9]"></a>datalog_nrf_use_flash_write</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, app_datalog.o(i.datalog_nrf_use_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = datalog_nrf_use_flash_write &rArr; datalog_nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_wait_for_flash_ready
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_erase
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Write
</UL>

<P><STRONG><a name="[2a6]"></a>datalog_tick_ms_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_datalog.o(i.datalog_tick_ms_run))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[303]"></a>datalog_tick_s_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_datalog.o(i.datalog_tick_s_get))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
</UL>

<P><STRONG><a name="[304]"></a>datalog_tick_s_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_datalog.o(i.datalog_tick_s_reset))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
</UL>

<P><STRONG><a name="[2b6]"></a>datalog_tick_s_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_datalog.o(i.datalog_tick_s_run))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[3ce]"></a>datalog_wait_for_flash_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_datalog.o(i.datalog_wait_for_flash_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = datalog_wait_for_flash_ready &rArr; nrf_fstorage_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_write
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_read
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_erase
</UL>

<P><STRONG><a name="[8c]"></a>decode_Casper104</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ir_casper104.o(i.decode_Casper104))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_Casper104 &rArr; Casper104_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_toCommonMode
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_toCommonFanSpeed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setRaw
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_recv
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getTemp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getSwingV
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getPower
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getMode
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getFan
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>decode_Casper343</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ir_casper343.o(i.decode_Casper343))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_Casper343 &rArr; Casper343_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_toCommonMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setRaw
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_recv
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getTemp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getSwingV
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getPower
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getMode
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>decode_Coolix</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ir_coolix.o(i.decode_Coolix))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = decode_Coolix &rArr; ac_control_update_status_to_payload &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_toCommonMode
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_toCommonFanSpeed
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setRaw
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getTemp
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getPower
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>decode_Daikin128</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin128))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_Daikin128 &rArr; Daikin128_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_toCommonMode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_toCommonFanSpeed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setRaw
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_recv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getTemp
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getSwingVertical
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getPowerToggle
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getMode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>decode_Daikin152</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin152))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = decode_Daikin152 &rArr; Daikin152_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonMode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonFanSpeed
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setRaw
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_recv
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getTemp
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getSwingV
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getPower
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getMode
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>decode_Daikin160</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin160))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_Daikin160 &rArr; Daikin160_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_setRaw
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_recv
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getTemp
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getSwingVertical
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getPower
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getMode
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>decode_Daikin176</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin176))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_Daikin176 &rArr; Daikin176_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_toCommonMode
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_toCommonFanSpeed
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setRaw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_recv
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getTemp
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getPower
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getMode
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>decode_Daikin2</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin2))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_Daikin2 &rArr; Daikin2_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonMode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonFanSpeed
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setRaw
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_recv
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getTemp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getSwingVertical
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getPower
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getMode
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>decode_Daikin216</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin216))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_Daikin216 &rArr; Daikin216_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonMode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonFanSpeed
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_setRaw
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_recv
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getTemp
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getSwingVertical
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getPower
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getMode
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>decode_Daikin64</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_Daikin64))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = decode_Daikin64 &rArr; Daikin64_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_toCommonMode
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_toCommonFanSpeed
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setRaw
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_recv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getTemp
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getSwingVertical
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getPowerToggle
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>decode_DaikinESP</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ir_daikin.o(i.decode_DaikinESP))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = decode_DaikinESP &rArr; DaikinESP_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonMode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_toCommonFanSpeed
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAcStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_setRaw
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getTemp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getSwingVertical
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getPower
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getMode
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>decode_Gree</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ir_gree.o(i.decode_Gree))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = decode_Gree &rArr; Gree_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_toCommonMode
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_toCommonFanSpeed
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setRaw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_recv
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_getTemp
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_getSwingVerticalPosition
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_getPower
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>decode_LG</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ir_lg.o(i.decode_LG))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = decode_LG &rArr; LG_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_recv
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getTemp
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getSwingV
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getPower
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getMode
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getFan
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_toCommonMode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_toCommonFanSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>decode_Mitsubishi112</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ir_mitsubishi112.o(i.decode_Mitsubishi112))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = decode_Mitsubishi112 &rArr; Mitsubishi112_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setRaw
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_recv
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getTemp
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getSwingV
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getPower
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getMode
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getFan
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_toCommonMode
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_toCommonFanSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>decode_Mitsubishi136</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ir_mitsubishi136.o(i.decode_Mitsubishi136))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_Mitsubishi136 &rArr; Mitsubishi136_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setRaw
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_recv
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getTemp
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getSwingV
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getPower
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getMode
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getFan
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_toCommonMode
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_toCommonFanSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>decode_Mitsubishi144</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ir_mitsubishi144.o(i.decode_Mitsubishi144))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = decode_Mitsubishi144 &rArr; Mitsubishi144_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setRaw
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_recv
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getVane
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getTemp
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getPower
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getMode
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_getFan
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_toCommonMode
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_toCommonFanSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>decode_MitsubishiHeavy</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, ir_mitsubishiheavy.o(i.decode_MitsubishiHeavy))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_MitsubishiHeavy &rArr; MitsubishiHeavy_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_recv
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_toCommonFanSpeed
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_setRaw
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getTemp
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getSwingVertical
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getPower
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getMode
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getFan
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_toCommonMode
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_toCommonFanSpeed
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setRaw
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getTemp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getSwingVertical
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getPower
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getMode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>decode_PanasonicAc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ir_panasonic.o(i.decode_PanasonicAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_PanasonicAc &rArr; PanasonicAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_toCommonMode
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_toCommonFanSpeed
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setRaw
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_recv
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getTemp
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getSwingVertical
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getPower
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getMode
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>decode_PanasonicAc32</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ir_panasonic32.o(i.decode_PanasonicAc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = decode_PanasonicAc32 &rArr; PanasonicAc32_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_setRaw
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_recv
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_getTemp
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_getSwingVertical
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_getPowerToggle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_getMode
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_getFan
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_toCommonMode
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_toCommonFanSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>decode_ReetechAc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ir_reetech.o(i.decode_ReetechAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_ReetechAc &rArr; ReetechAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_toCommonMode
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_toCommonFanSpeed
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setRaw
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_recv
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getTemp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getSwingV
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getPower
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getMode
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getFan
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>decode_Samsung</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ir_samsung.o(i.decode_Samsung))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = decode_Samsung &rArr; Samsung_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_toCommonMode
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_toCommonFanSpeed
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setRaw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_recv
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getTemp
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getSwing
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getPower
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getMode
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>decode_Sanyo</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ir_sanyo.o(i.decode_Sanyo))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_Sanyo &rArr; Sanyo_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_setRaw
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_recv
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getTemp
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getSwingV
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getPower
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getMode
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getFan
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_toCommonMode
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_toCommonFanSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>decode_Sharp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ir_sharp.o(i.decode_Sharp))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_Sharp &rArr; Sharp_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_toCommonMode
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_toCommonFanSpeed
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setRaw
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_recv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getTemp
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getSwingV
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getPower
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getMode
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>decode_ToshibaAc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ir_toshiba.o(i.decode_ToshibaAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = decode_ToshibaAc &rArr; ToshibaAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_toCommonMode
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_toCommonFanSpeed
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setRaw
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_recv
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getTemp
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getSwing
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getPower
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getMode
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>decode_VestelAc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ir_vestel.o(i.decode_VestelAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = decode_VestelAc &rArr; VestelAc_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_toCommonMode
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_toCommonFanSpeed
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setRaw
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_recv
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_getTemp
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_getSwing
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_getPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>encode_Casper104</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ir_casper104.o(i.encode_Casper104))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_Casper104 &rArr; Casper104_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setTemp
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setSwingV
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setPower
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setFan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_setButton
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_send
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_getRaw
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_convertMode
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_convertFan
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>encode_Casper343</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ir_casper343.o(i.encode_Casper343))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_Casper343 &rArr; Casper343_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setTemp
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setSwingV
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setPower
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setMode
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setFan
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_setCommand
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_getRaw
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_convertMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_ClearData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>encode_Coolix</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ir_coolix.o(i.encode_Coolix))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = encode_Coolix &rArr; Coolix_send &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setTemp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setPower
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setFan
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_send
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_getRaw
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_convertMode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>encode_Daikin128</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_Daikin128))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_Daikin128 &rArr; Daikin128_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setTemp
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setPowerToggle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setMode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setFan
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_getRaw
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_convertMode
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>encode_Daikin152</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_Daikin152))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = encode_Daikin152 &rArr; Daikin152_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_convertMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_convertFan
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setTemp
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setPower
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setMode
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_setFan
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_getRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>encode_Daikin160</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_Daikin160))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_Daikin160 &rArr; Daikin160_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_setTemp
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_setPower
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_setMode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_setFan
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_getRaw
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_convertMode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>encode_Daikin176</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_Daikin176))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_Daikin176 &rArr; Daikin176_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_convertMode
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_convertFan
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setTemp
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setPower
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setMode
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_setFan
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_getRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>encode_Daikin2</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_Daikin2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = encode_Daikin2 &rArr; Daikin2_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setTemp
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setPower
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setMode
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_setFan
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_send
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_getRaw
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_convertMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>encode_Daikin216</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_Daikin216))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_Daikin216 &rArr; Daikin216_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_setTemp
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_setPower
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_setMode
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_setFan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_getRaw
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_convertMode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>encode_Daikin64</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ir_daikin.o(i.encode_Daikin64))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = encode_Daikin64 &rArr; Daikin64_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setTemp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setPowerToggle
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setMode
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setFan
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_getRaw
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_convertMode
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>encode_DaikinESP</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ir_daikin.o(i.encode_DaikinESP))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = encode_DaikinESP &rArr; DaikinESP_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertMode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertFan
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_setTemp
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_setPower
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_setMode
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_setFan
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_getRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>encode_Gree</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ir_gree.o(i.encode_Gree))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = encode_Gree &rArr; Gree_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setSwingVertical
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setPower
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setFan
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_getRaw
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_convertMode
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>encode_LG</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ir_lg.o(i.encode_LG))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = encode_LG &rArr; LG_send2 &rArr; LG_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setTemp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setPower
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setMode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setFan
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_send2
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_send
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getRaw
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_convertMode
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>encode_Mitsubishi112</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ir_mitsubishi112.o(i.encode_Mitsubishi112))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = encode_Mitsubishi112 &rArr; Mitsubishi112_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setTemp
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setSwingV
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setPower
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setMode
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_setFan
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_send
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_convertMode
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>encode_Mitsubishi136</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ir_mitsubishi136.o(i.encode_Mitsubishi136))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = encode_Mitsubishi136 &rArr; Mitsubishi136_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setTemp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setSwingV
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setPower
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setMode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_setFan
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_send
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_convertMode
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>encode_Mitsubishi144</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ir_mitsubishi144.o(i.encode_Mitsubishi144))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = encode_Mitsubishi144 &rArr; Mitsubishi144_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setVane
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setTemp
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setPower
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setMode
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_setFan
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_send
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_convertMode
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>encode_MitsubishiHeavy</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ir_mitsubishiheavy.o(i.encode_MitsubishiHeavy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_MitsubishiHeavy &rArr; MitsubishiHeavy_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_send
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_setTemp
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_setSwingVertical
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_setPower
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_setMode
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_setFan
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_getRaw
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_convertMode
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_convertFan
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setTemp
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setSwingVertical
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setPower
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setMode
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_setFan
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_getRaw
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_convertMode
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>encode_PanasonicAc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ir_panasonic.o(i.encode_PanasonicAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_PanasonicAc &rArr; PanasonicAc_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setTemp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setSwingVertical
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setPower
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setMode
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_setFan
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_convertMode
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>encode_PanasonicAc32</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ir_panasonic32.o(i.encode_PanasonicAc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = encode_PanasonicAc32 &rArr; PanasonicAc32_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_setTemp
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_setSwingVertical
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_setPowerToggle
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_setMode
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_setFan
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_send
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_convertMode
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>encode_ReetechAc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ir_reetech.o(i.encode_ReetechAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_ReetechAc &rArr; ReetechAc_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setTemp
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setSwingV
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setPower
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setMode
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setFan
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setButton
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_send
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_getRaw
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_convertMode
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_convertFan
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>encode_Samsung</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ir_samsung.o(i.encode_Samsung))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = encode_Samsung &rArr; Samsung_sendOn &rArr; Samsung_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setTemp
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setSwing
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setPower
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setMode
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_setFan
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_sendOn
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_sendOff
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_send
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_getRaw
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_convertMode
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>encode_Sanyo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ir_sanyo.o(i.encode_Sanyo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_Sanyo &rArr; Sanyo_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_setTemp
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_setSwingV
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_setPower
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_setMode
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_setFan
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_send
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_getRaw
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_convertMode
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>encode_Sharp</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ir_sharp.o(i.encode_Sharp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = encode_Sharp &rArr; Sharp_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setTemp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setSwingV
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setPower
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setMode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_setFan
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_send
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getRaw
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getModel
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_convertMode
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>encode_ToshibaAc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ir_toshiba.o(i.encode_ToshibaAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = encode_ToshibaAc &rArr; ToshibaAc_send &rArr; sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setTemp
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setSwing
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setPower
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setMode
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_setFan
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_send
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_getRaw
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_convertMode
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>encode_VestelAc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ir_vestel.o(i.encode_VestelAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = encode_VestelAc &rArr; VestelAc_send &rArr; sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setIrTxState
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setTemp
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setSwing
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setPower
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setMode
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setFan
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_send
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_getRaw
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_convertMode
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_convertFan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>error_code_clear</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_error_code.o(i.error_code_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = error_code_clear &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
</UL>

<P><STRONG><a name="[4fa]"></a>error_code_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_error_code.o(i.error_code_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = error_code_init &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4fb]"></a>error_code_report_reset</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, app_error_code.o(i.error_code_report_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = error_code_report_reset &rArr; App_iSmartPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketAddToList
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_task
</UL>

<P><STRONG><a name="[4fd]"></a>error_code_task</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_error_code.o(i.error_code_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = error_code_task &rArr; error_code_report_reset &rArr; App_iSmartPacketAddToList &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_report_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1cb]"></a>fahrenheitToCelsius</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, irutils.o(i.fahrenheitToCelsius))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fahrenheitToCelsius &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setTemp
</UL>

<P><STRONG><a name="[509]"></a>fds_file_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[50d]"></a>fds_record_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[50f]"></a>fds_record_find</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[511]"></a>fds_record_find_by_key</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[512]"></a>fds_record_find_in_file</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[641]"></a>fds_record_id_from_desc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[513]"></a>fds_record_open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[514]"></a>fds_record_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[516]"></a>fds_record_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[101]"></a>force_device_disconnect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_ble.o(i.force_device_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = force_device_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[6b4]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
</UL>

<P><STRONG><a name="[ee]"></a>fwd_mcol</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, aes128.o(i.fwd_mcol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fwd_mcol
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upr
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_encrypt
</UL>

<P><STRONG><a name="[4d]"></a>gatt_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_ble.o(i.gatt_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.gatt_init)
</UL>
<P><STRONG><a name="[364]"></a>gatt_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_ble.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gatt_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[380]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = gcm_ble_evt_handler &rArr; store_car_value &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_written
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[ad]"></a>gcm_im_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_needed
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>gcm_pdb_evt_handler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gcm_pdb_evt_handler &rArr; car_update_needed &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[53b]"></a>getRawBuf</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, irrecv.o(i.getRawBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getRawBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPanasonicAcHeader
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Toshiba
</UL>

<P><STRONG><a name="[6a6]"></a>get_ble_transmit_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.get_ble_transmit_status))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_state
</UL>

<P><STRONG><a name="[6b3]"></a>get_ir_learning_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_learning_fsm.o(i.get_ir_learning_tick))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
</UL>

<P><STRONG><a name="[10c]"></a>get_led_pwm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_indicator_led.o(i.get_led_pwm))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
</UL>

<P><STRONG><a name="[4fc]"></a>get_sequence</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_message_queue.o(i.get_sequence))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_report_reset
</UL>

<P><STRONG><a name="[2ad]"></a>gmtime_r</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, m_time.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
</UL>

<P><STRONG><a name="[4a]"></a>gpiote_btn0_event_handler</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, btn.o(i.gpiote_btn0_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gpiote_btn0_event_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_mode
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_mode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btn.o(i.btn_init)
</UL>
<P><STRONG><a name="[47]"></a>gpiote_handler</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, app_gpiote.o(i.gpiote_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpiote_handler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gpiote.o(i.app_gpiote_user_register)
</UL>
<P><STRONG><a name="[52f]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[53f]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[540]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[a8]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[543]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_needed
</UL>

<P><STRONG><a name="[544]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gscm_service_changed_ind_send &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[547]"></a>im_address_resolve</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[548]"></a>im_ble_addr_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = im_ble_addr_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[37e]"></a>im_ble_evt_handler</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[508]"></a>im_conn_handle_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = im_conn_handle_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[344]"></a>im_find_duplicate_bonding_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, id_manager.o(i.im_find_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = im_find_duplicate_bonding_data &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[54c]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
</UL>

<P><STRONG><a name="[54f]"></a>im_master_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_encryption
</UL>

<P><STRONG><a name="[54e]"></a>im_master_ids_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[345]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[34a]"></a>im_peer_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[343]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[551]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[13a]"></a>initDecodeData</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, irrecv.o(i.initDecodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initDecodeData
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGreeAc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Gree
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isVestelAc
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSamsung
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Reetech
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Coolix
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCapser343
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_VestelAc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ToshibaAc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sharp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Samsung
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_ReetechAc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_MitsubishiHeavy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Coolix
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper343
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Casper104
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_isHeaderMatch
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_isHeaderMatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_isHeaderMatch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_isHeaderMatch
</UL>

<P><STRONG><a name="[556]"></a>init_timer</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, main.o(i.init_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[559]"></a>init_timer_adc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.init_timer_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer_adc &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[240]"></a>invertBytePairs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, irutils.o(i.invertBytePairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = invertBytePairs
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi88_checksum
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi152_checksum
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_checksum
</UL>

<P><STRONG><a name="[2af]"></a>ir_learning_fsm_main_loop</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ir_learning_fsm.o(i.ir_learning_fsm_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ir_learning_fsm_main_loop &rArr; ir_learning_set_ret_code &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_set_ret_code
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_lookup_transitions
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[560]"></a>ir_learning_lookup_transitions</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ir_learning_fsm.o(i.ir_learning_lookup_transitions))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ir_learning_lookup_transitions
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_fsm_main_loop
</UL>

<P><STRONG><a name="[55f]"></a>ir_learning_set_ret_code</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ir_learning_fsm.o(i.ir_learning_set_ret_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ir_learning_set_ret_code &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_fsm_main_loop
</UL>

<P><STRONG><a name="[561]"></a>ir_learning_tick_loop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ir_learning_fsm.o(i.ir_learning_tick_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ir_learning_tick_loop &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_state
</UL>

<P><STRONG><a name="[55e]"></a>ir_learning_tick_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_learning_fsm.o(i.ir_learning_tick_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_exit_state
</UL>

<P><STRONG><a name="[203]"></a>ir_lib_deinit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ir_lib.o(i.ir_lib_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ir_lib_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Task
</UL>

<P><STRONG><a name="[1dc]"></a>ir_lib_init</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, ir_lib.o(i.ir_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ir_lib_init &rArr; sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitIR
</UL>

<P><STRONG><a name="[1dd]"></a>ir_lib_send</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ir_lib.o(i.ir_lib_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ir_lib_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pulse_count_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitIR
</UL>

<P><STRONG><a name="[2ab]"></a>ir_lib_tx_done_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_lib.o(i.ir_lib_tx_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ir_lib_tx_done_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>isCapser343</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ir_casper343.o(i.isCapser343))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = isCapser343 &rArr; Casper343_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1d6]"></a>isGreeAc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ir_gree.o(i.isGreeAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = isGreeAc &rArr; Gree_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_setRaw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1d1]"></a>isHeader_Coolix</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ir_coolix.o(i.isHeader_Coolix))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = isHeader_Coolix &rArr; Coolix_recv &rArr; matchMark &rArr; match &rArr; ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_setRaw
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1d4]"></a>isHeader_Reetech</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ir_reetech.o(i.isHeader_Reetech))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = isHeader_Reetech &rArr; ReetechAc_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_setRaw
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1cf]"></a>isHeader_Toshiba</STRONG> (Thumb, 118 bytes, Stack size 1432 bytes, ir_toshiba.o(i.isHeader_Toshiba))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = isHeader_Toshiba &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[63]"></a>isIrTxEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_common.o(i.isIrTxEnable))
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>isPanasonicAcHeader</STRONG> (Thumb, 138 bytes, Stack size 1432 bytes, ir_panasonic.o(i.isPanasonicAcHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = isPanasonicAcHeader &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchGeneric_8
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRawBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1d7]"></a>isSamsung</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ir_samsung.o(i.isSamsung))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = isSamsung &rArr; Samsung_recv &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[1d5]"></a>isVestelAc</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ir_vestel.o(i.isVestelAc))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = isVestelAc &rArr; VestelAc_recv &rArr; matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDecodeData
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_setRaw
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
</UL>

<P><STRONG><a name="[207]"></a>is_ac_type_detection_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac_type_detection_task.o(i.is_ac_type_detection_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[2f1]"></a>is_adc_task_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc_task.o(i.is_adc_task_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
</UL>

<P><STRONG><a name="[54d]"></a>is_valid_irk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[118]"></a>list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ampm_list.o(i.list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketAddToList
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketAddToList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketAddToList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketAddToList
</UL>

<P><STRONG><a name="[11a]"></a>list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(i.list_head))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketGet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketGet
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketGet
</UL>

<P><STRONG><a name="[f3]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_list.o(i.list_init))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMessageQueueInit
</UL>

<P><STRONG><a name="[11b]"></a>list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_list.o(i.list_pop))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketGet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketGet
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketGet
</UL>

<P><STRONG><a name="[572]"></a>list_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ampm_list.o(i.list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[573]"></a>list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ampm_list.o(i.list_tail))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = main &rArr; main_loop &rArr; IR_Task &rArr; IRInterface_DetectDeviceType &rArr; isPanasonicAcHeader &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_mode
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sensor_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_meter_init
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMakeOtp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_loop
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_init
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear_history_sensor
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetNumberSaved
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boards_init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_trigger
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ac_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Init
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_adc
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[587]"></a>main_loop</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, main.o(i.main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = main_loop &rArr; IR_Task &rArr; IRInterface_DetectDeviceType &rArr; isPanasonicAcHeader &rArr; matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sensor_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_indicator_led_on
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_indicator_led_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMakeOtp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_loop
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc_val
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_energy_val
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_task
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_transmit_fsm_main_loop
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_datalog
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_blink_task
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Task
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitIR
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_GetDataSetTransmitMaxIdx
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pingpong_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_init
</UL>

<P><STRONG><a name="[58c]"></a>match</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, irrecv.o(i.match))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = match &rArr; ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
</UL>

<P><STRONG><a name="[2da]"></a>matchAtLeast</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, irrecv.o(i.matchAtLeast))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = matchAtLeast &rArr; ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticksLow
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
</UL>

<P><STRONG><a name="[2d9]"></a>matchBytes</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, irrecv.o(i.matchBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
</UL>

<P><STRONG><a name="[1b8]"></a>matchData</STRONG> (Thumb, 390 bytes, Stack size 136 bytes, irrecv.o(i.matchData))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchMark
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseBits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchSpace
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_recv
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_isHeaderMatch
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchBytes
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
</UL>

<P><STRONG><a name="[17e]"></a>matchGeneric_64</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, irrecv.o(i.matchGeneric_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = matchGeneric_64 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_isHeaderMatch
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_recv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_recv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_recv
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_recv
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_recv
</UL>

<P><STRONG><a name="[13c]"></a>matchGeneric_8</STRONG> (Thumb, 68 bytes, Stack size 112 bytes, irrecv.o(i.matchGeneric_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = matchGeneric_8 &rArr; _matchGeneric &rArr; matchBytes &rArr; matchData &rArr;  matchData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_recv
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isPanasonicAcHeader
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isHeader_Toshiba
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_isHeaderMatch
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_recv
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_recv
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_recv
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_recv
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_recv
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_recv
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_recv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_recv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_recv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_recv
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_recv
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_recv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_recv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_recv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_recv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_recv
</UL>

<P><STRONG><a name="[14b]"></a>matchMark</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, irrecv.o(i.matchMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = matchMark &rArr; match &rArr; ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_recv
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_recv
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_recv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_recv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_recv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recv
</UL>

<P><STRONG><a name="[14c]"></a>matchSpace</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, irrecv.o(i.matchSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = matchSpace &rArr; match &rArr; ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_recv
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_matchGeneric
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_recv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_recv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_recv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coolix_recv
</UL>

<P><STRONG><a name="[31b]"></a>mesh_add_packet</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mesh_utils.o(i.mesh_add_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mesh_add_packet &rArr; rbc_mesh_value_set &rArr; mesh_srv_char_val_set &rArr; trickle_rx_inconsistent &rArr; trickle_timer_reset &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_value_set
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_convert_ble_addr_to_long
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
</UL>

<P><STRONG><a name="[584]"></a>mesh_app_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_mesh.o(i.mesh_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mesh_app_init &rArr; rbc_mesh_init &rArr; mesh_srv_init &rArr; trickle_setup &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_enable_all_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMessageQueueInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[594]"></a>mesh_enable_all_handle</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mesh_utils.o(i.mesh_enable_all_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mesh_enable_all_handle &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_value_enable
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_handle_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_init
</UL>

<P><STRONG><a name="[597]"></a>mesh_srv_char_val_enable</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mesh_srv.o(i.mesh_srv_char_val_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mesh_srv_char_val_enable &rArr; trickle_init &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_value_enable
</UL>

<P><STRONG><a name="[599]"></a>mesh_srv_char_val_get</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mesh_srv.o(i.mesh_srv_char_val_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_srv_char_val_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_assemble
</UL>

<P><STRONG><a name="[59a]"></a>mesh_srv_char_val_set</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, mesh_srv.o(i.mesh_srv_char_val_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mesh_srv_char_val_set &rArr; trickle_rx_inconsistent &rArr; trickle_timer_reset &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_rx_inconsistent
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_value_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
</UL>

<P><STRONG><a name="[59c]"></a>mesh_srv_get_next_processing_time</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mesh_srv.o(i.mesh_srv_get_next_processing_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_srv_get_next_processing_time
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_next_processing_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
</UL>

<P><STRONG><a name="[59e]"></a>mesh_srv_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mesh_srv.o(i.mesh_srv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mesh_srv_init &rArr; trickle_setup &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_setup
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_init
</UL>

<P><STRONG><a name="[5a1]"></a>mesh_srv_packet_assemble</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, mesh_srv.o(i.mesh_srv_packet_assemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mesh_srv_packet_assemble &rArr; trickle_step &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_register_tx
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_get
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
</UL>

<P><STRONG><a name="[33a]"></a>mesh_srv_packet_process</STRONG> (Thumb, 610 bytes, Stack size 200 bytes, mesh_srv.o(i.mesh_srv_packet_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mesh_srv_packet_process &rArr; rbc_mesh_event_handler &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_rx_inconsistent
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_rx_consistent
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_init
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_set
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_event_execute
</UL>

<P><STRONG><a name="[5ab]"></a>next_id_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_id_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[31a]"></a>notify_data_transmit_fsm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_transmit_fsm.o(i.notify_data_transmit_fsm))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
</UL>

<P><STRONG><a name="[5ac]"></a>nrf_atfifo_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[554]"></a>nrf_atfifo_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[4f7]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[5af]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[5b0]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
</UL>

<P><STRONG><a name="[4f8]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[371]"></a>nrf_atflags_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>

<P><STRONG><a name="[3a3]"></a>nrf_atflags_fetch_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_fetch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[3a2]"></a>nrf_atflags_find_and_set_flag</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_atflags.o(i.nrf_atflags_find_and_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[36b]"></a>nrf_atflags_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>

<P><STRONG><a name="[370]"></a>nrf_atflags_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>

<P><STRONG><a name="[57d]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[57b]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[552]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[397]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[5b2]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>

<P><STRONG><a name="[5b8]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_add
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[5b5]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[5b3]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[3d4]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[5b4]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[5bb]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_has_next
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[5bd]"></a>nrf_balloc_alloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[5bf]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[5f5]"></a>nrf_balloc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[51e]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[51d]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[ba]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[376]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[69b]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[bf]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; on_rw_authorize_request
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_release
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[5cc]"></a>nrf_drv_clock_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[5cf]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[5d0]"></a>nrf_drv_twi_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twi_init &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
</UL>

<P><STRONG><a name="[5d5]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[39a]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[5d6]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[3cd]"></a>nrf_fstorage_erase</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_page_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_erase
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_erase
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[3cf]"></a>nrf_fstorage_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_init
</UL>

<P><STRONG><a name="[3d3]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_wait_for_flash_ready
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>

<P><STRONG><a name="[3d1]"></a>nrf_fstorage_read</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_read
</UL>

<P><STRONG><a name="[c1]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[c9]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[c3]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[3d2]"></a>nrf_fstorage_write</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_store
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_write
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_data
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[5e2]"></a>nrf_log_backend_add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_id_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[5e4]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[5e5]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[653]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[57a]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[30a]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 760 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_sys_evt_handler
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[fe]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_mode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Task
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_pending
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_meter_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_blink_trigger
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_get_status_from_payload
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketAddToList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_IR_data
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_report_reset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Olimpia136AC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_OG104AC
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Funiki
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Trigger
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_write
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_print_flash_info
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_fstorage_evt_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_timer_event_data
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_schedule_event_data
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby_state
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_state
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_exit_state
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc_val
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_energy_val
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear_history_sensor
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_blink_task
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_TX_WDT_Task
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_TransmitIR
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToByteFrame
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[10a]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sensor_task
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_meter_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task_trigger
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_clear
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_set_config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_get_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_get_status_from_payload
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_event_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sequence_increment
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_SetIrTxState
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ConstructDeviceType
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRInterface_DetectDeviceType
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Write
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_write
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_read
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_print_flash_info
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_enable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_tick_loop
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_set_ret_code
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_rtc_val
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_energy_val
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_code_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_type_detection_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[2b7]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mesh_task
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Erase
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_fstorage_evt_handler
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_read_id
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_animation_trigger
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_encryption
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[108]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_loop
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[109]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1s
</UL>

<P><STRONG><a name="[30c]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[107]"></a>nrf_log_frontend_std_6</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e9]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[579]"></a>nrf_log_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[5a7]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[5f3]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[309]"></a>nrf_log_panic</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[5e8]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[5ec]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[5f4]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[5e6]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[5f1]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[5ea]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[5e7]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[5ed]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[5f2]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[5f6]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[38b]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[38c]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[5fa]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[38a]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[276]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[553]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[5df]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[5f8]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[5f9]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[601]"></a>nrf_strerror_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[30b]"></a>nrf_strerror_get</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_encryption
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[129]"></a>nrf_use_flash_erase</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrf_use_flash.o(i.nrf_use_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[124]"></a>nrf_use_flash_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_use_flash.o(i.nrf_use_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_use_flash_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flash_info
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Init
</UL>

<P><STRONG><a name="[12b]"></a>nrf_use_flash_store</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, nrf_use_flash.o(i.nrf_use_flash_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_use_flash_store &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[5ce]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[5cd]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[566]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[606]"></a>nrfx_gpiote_in_event_disable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_enable
</UL>

<P><STRONG><a name="[60b]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_enable
</UL>

<P><STRONG><a name="[314]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
</UL>

<P><STRONG><a name="[614]"></a>nrfx_prs_acquire</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
</UL>

<P><STRONG><a name="[616]"></a>nrfx_saadc_buffer_convert</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[619]"></a>nrfx_saadc_channel_init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[61b]"></a>nrfx_saadc_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[2f0]"></a>nrfx_saadc_sample</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrfx_saadc.o(i.nrfx_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_measure_vdd
</UL>

<P><STRONG><a name="[61c]"></a>nrfx_twi_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_twi.o(i.nrfx_twi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrfx_twi_enable &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
</UL>

<P><STRONG><a name="[5d2]"></a>nrfx_twi_init</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, nrfx_twi.o(i.nrfx_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrfx_twi_init &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[5d3]"></a>nrfx_twi_rx</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrfx_twi.o(i.nrfx_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrfx_twi_rx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_xfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[5d4]"></a>nrfx_twi_tx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, nrfx_twi.o(i.nrfx_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_xfer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>

<P><STRONG><a name="[61f]"></a>nrfx_twi_xfer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_twi.o(i.nrfx_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
</UL>

<P><STRONG><a name="[2a0]"></a>nvmc_config</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, system_nrf52.o(i.nvmc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvmc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2a1]"></a>nvmc_wait</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_nrf52.o(i.nvmc_wait))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[628]"></a>packet_create_from_data</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, transport_control.o(i.packet_create_from_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packet_create_from_data
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_callback
</UL>

<P><STRONG><a name="[a5]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = pdb_pds_evt_handler &rArr; reattempt_previous_operations &rArr; write_buf_store_in_event &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_stored
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[536]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_encryption
</UL>

<P><STRONG><a name="[550]"></a>pdb_peer_free</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[341]"></a>pdb_write_buf_get</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_acquire
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[541]"></a>pdb_write_buf_release</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; mutex_unlock &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
</UL>

<P><STRONG><a name="[348]"></a>pdb_write_buf_store</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[638]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[63a]"></a>pds_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[54a]"></a>pds_peer_data_iterate</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
</UL>

<P><STRONG><a name="[549]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
</UL>

<P><STRONG><a name="[39f]"></a>pds_peer_data_read</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[53e]"></a>pds_peer_data_store</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
</UL>

<P><STRONG><a name="[347]"></a>pds_peer_id_allocate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[62f]"></a>pds_peer_id_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[636]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pds_peer_id_is_allocated &rArr; peer_id_is_allocated &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
</UL>

<P><STRONG><a name="[642]"></a>peer_id_allocate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>

<P><STRONG><a name="[643]"></a>peer_id_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = peer_id_delete &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[647]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_free &rArr; release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[639]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[63b]"></a>peer_id_get_next_used</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[645]"></a>peer_id_is_allocated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_allocated &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[64a]"></a>peer_id_is_deleted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_deleted &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[64d]"></a>pingpong_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pingpong.o(i.pingpong_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pingpong_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[687]"></a>pingpong_swap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pingpong.o(i.pingpong_swap))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_handler
</UL>

<P><STRONG><a name="[632]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; mutex_unlock &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[634]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pm_buffer_ptr_get &rArr; mutex_lock_status_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[64e]"></a>pm_buffer_release</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pm_buffer_release &rArr; mutex_unlock &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[9]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>pm_gscm_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_manager.o(i.pm_gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gscm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>pm_im_evt_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_im_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_pdb_evt_handler &rArr; rank_vars_update &rArr; pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[651]"></a>pm_peer_ranks_get</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, peer_manager.o(i.pm_peer_ranks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
</UL>

<P><STRONG><a name="[ab]"></a>pm_sm_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>protocol_send_IR_data</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ir_sendmsgtomesh.o(i.protocol_send_IR_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = protocol_send_IR_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Task
</UL>

<P><STRONG><a name="[655]"></a>protocol_send_data_to_gw</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, app_message_queue.o(i.protocol_send_data_to_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = protocol_send_data_to_gw &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sequence_increment
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartMeshPacketAddToList
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartAppPacketAddToList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_state
</UL>

<P><STRONG><a name="[301]"></a>protocol_send_schedule_event_data</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ir_sendmsgtomesh.o(i.protocol_send_schedule_event_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = protocol_send_schedule_event_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_alarm_task
</UL>

<P><STRONG><a name="[2e7]"></a>protocol_send_timer_event_data</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ir_sendmsgtomesh.o(i.protocol_send_timer_event_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = protocol_send_timer_event_data &rArr; transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Saving_Trigger
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_fsm_prepare_payload
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
</UL>

<P><STRONG><a name="[660]"></a>radio_disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, radio_control.o(i.radio_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_abort
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
</UL>

<P><STRONG><a name="[663]"></a>radio_event_handler</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, radio_control.o(i.radio_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = radio_event_handler &rArr; radio_transition_end &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_abort
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_rssi_get
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[66d]"></a>radio_init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, radio_control.o(i.radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_timeslot_begin
</UL>

<P><STRONG><a name="[627]"></a>radio_order</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, radio_control.o(i.radio_order))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = radio_order &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_ppi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_rx_timeout
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_will_go_to_disabled_state
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_put
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get_length
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_search
</UL>

<P><STRONG><a name="[664]"></a>radio_rssi_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, radio_control.o(i.radio_rssi_get))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
</UL>

<P><STRONG><a name="[274]"></a>rbc_mesh_SWI0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timeslot_handler.o(i.rbc_mesh_SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rbc_mesh_SWI0_IRQHandler &rArr; async_event_execute &rArr; mesh_srv_packet_process &rArr; rbc_mesh_event_handler &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_get
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_empty
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_event_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[6b7]"></a>rbc_mesh_access_address_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rbc_mesh.o(i.rbc_mesh_access_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_timeslot_begin
</UL>

<P><STRONG><a name="[626]"></a>rbc_mesh_channel_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rbc_mesh.o(i.rbc_mesh_channel_get))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_search
</UL>

<P><STRONG><a name="[5a4]"></a>rbc_mesh_event_handler</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, app_mesh.o(i.rbc_mesh_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = rbc_mesh_event_handler &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartPacketAddToList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppShowiSmartPacket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
</UL>

<P><STRONG><a name="[595]"></a>rbc_mesh_handle_count_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rbc_mesh.o(i.rbc_mesh_handle_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_enable_all_handle
</UL>

<P><STRONG><a name="[593]"></a>rbc_mesh_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rbc_mesh.o(i.rbc_mesh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rbc_mesh_init &rArr; mesh_srv_init &rArr; trickle_setup &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_handler_init
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_app_init
</UL>

<P><STRONG><a name="[67d]"></a>rbc_mesh_sys_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timeslot_handler.o(i.rbc_mesh_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rbc_mesh_sys_evt_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_order_earliest
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[596]"></a>rbc_mesh_value_enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rbc_mesh.o(i.rbc_mesh_value_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rbc_mesh_value_enable &rArr; mesh_srv_char_val_enable &rArr; trickle_init &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_enable_all_handle
</UL>

<P><STRONG><a name="[592]"></a>rbc_mesh_value_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rbc_mesh.o(i.rbc_mesh_value_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rbc_mesh_value_set &rArr; mesh_srv_char_val_set &rArr; trickle_rx_inconsistent &rArr; trickle_timer_reset &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_set
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_add_packet
</UL>

<P><STRONG><a name="[58f]"></a>reverseBits</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, irutils.o(i.reverseBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reverseBits
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchData
</UL>

<P><STRONG><a name="[55]"></a>saadc_event_handler</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, adc_task.o(i.saadc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = saadc_event_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pingpong_swap
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCallback
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afeCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_task.o(i.saadc_init)
</UL>
<P><STRONG><a name="[2ed]"></a>saadc_init</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, adc_task.o(i.saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = saadc_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pingpong_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[58a]"></a>save_energy_val</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_datalog.o(i.save_energy_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = save_energy_val &rArr; dataLogger_Save &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetNumberSaved
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[58b]"></a>save_rtc_val</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_datalog.o(i.save_rtc_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = save_rtc_val &rArr; dataLogger_Save &rArr; getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetNumberSaved
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[182]"></a>sendGeneric_64</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, irsend.o(i.sendGeneric_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sendGeneric_64 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataToRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_send2
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_send
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc32_send
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_send
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_send
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_send
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_send
</UL>

<P><STRONG><a name="[13f]"></a>sendGeneric_8</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, irsend.o(i.sendGeneric_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sendGeneric_8 &rArr; dataToRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataToRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gree_send
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_send
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_send
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_send
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_send
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Samsung_send
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_send
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_send
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_send
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_send
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_send
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_send
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReetechAc_send
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_send
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MitsubishiHeavy_send
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_send
</UL>

<P><STRONG><a name="[582]"></a>sensor_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sensor_utils.o(i.sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sensor_init &rArr; sos_sw_init
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sos_sw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[656]"></a>sequence_increment</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_message_queue.o(i.sequence_increment))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sequence_increment &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
</UL>

<P><STRONG><a name="[3ec]"></a>setAcStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ir_daikin.o(i.setAcStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = setAcStatus &rArr; ac_control_update_status_to_payload &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_temperature
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_swing
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_power_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_set_fan
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin64
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin160
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin128
</UL>

<P><STRONG><a name="[64]"></a>setIrTxState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ir_common.o(i.setIrTxState))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Gree
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_VestelAc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ToshibaAc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Samsung
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_ReetechAc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_MitsubishiHeavy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin64
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin216
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin160
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin128
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Coolix
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper343
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Casper104
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_deviceconstructor.o(.constdata)
</UL>
<P><STRONG><a name="[38e]"></a>set_ble_transmit_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.set_ble_transmit_status))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_data_state
</UL>

<P><STRONG><a name="[113]"></a>set_led_pwm</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_indicator_led.o(i.set_led_pwm))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPacket
</UL>

<P><STRONG><a name="[585]"></a>shtc3_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, shtc3.o(i.shtc3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = shtc3_init &rArr; shtc3_read_id &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_init
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_wakeup
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_softreset
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_read_id
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[586]"></a>shtc3_loop</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, shtc3.o(i.shtc3_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = shtc3_loop &rArr; shtc3_perform_measurements &rArr; _perform_measurements &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_perform_measurements
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a3]"></a>shtc3_perform_measurements</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, shtc3.o(i.shtc3_perform_measurements))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = shtc3_perform_measurements &rArr; _perform_measurements &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_measurements
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_loop
</UL>

<P><STRONG><a name="[6a0]"></a>shtc3_read_id</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, shtc3.o(i.shtc3_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = shtc3_read_id &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
</UL>

<P><STRONG><a name="[6a2]"></a>shtc3_softreset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shtc3.o(i.shtc3_softreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = shtc3_softreset &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
</UL>

<P><STRONG><a name="[6a1]"></a>shtc3_wakeup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, shtc3.o(i.shtc3_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = shtc3_wakeup &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
</UL>

<P><STRONG><a name="[37f]"></a>sm_ble_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[a7]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sm_pdb_evt_handler &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>sm_smd_evt_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sm_smd_evt_handler &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[6a4]"></a>smd_ble_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[56a]"></a>smd_link_secure</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_encryption &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_peripheral
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[6a5]"></a>smd_params_reply</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[699]"></a>sos_sw_init</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, sos_sw_utils.o(i.sos_sw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sos_sw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[55a]"></a>start_timer_adc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.start_timer_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_timer_adc
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_adc
</UL>

<P><STRONG><a name="[533]"></a>store_car_value</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.store_car_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = store_car_value &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[136]"></a>sumBytes</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, irutils.o(i.sumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_validChecksum
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_validChecksum
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_validChecksum
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_calculateChecksum
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_calcChecksum
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_validChecksum
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PanasonicAc_calcChecksum
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper104_calcChecksum
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_checksum
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_validChecksum
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_checksum
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_validChecksum
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_checksum
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_checksum
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_validChecksum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_checksum
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_checksum
</UL>

<P><STRONG><a name="[20e]"></a>sumNibbles_64</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, irutils.o(i.sumNibbles_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sumNibbles_64
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_recv
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_calcChecksum
</UL>

<P><STRONG><a name="[166]"></a>sumNibbles_8</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, irutils.o(i.sumNibbles_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sumNibbles_8
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_calcChecksum
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_calcSecondChecksum
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_calcFirstChecksum
</UL>

<P><STRONG><a name="[31f]"></a>task_control_get_current_task</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_task_control.o(i.task_control_get_current_task))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_save_datalog
</UL>

<P><STRONG><a name="[58e]"></a>ticksHigh</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, irrecv.o(i.ticksHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ticksHigh &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_validTolerance
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[58d]"></a>ticksLow</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, irrecv.o(i.ticksLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ticksLow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_validTolerance
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchAtLeast
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[662]"></a>timer_abort</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, timer_control.o(i.timer_abort))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_disable
</UL>

<P><STRONG><a name="[67a]"></a>timer_event_handler</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, timer_control.o(i.timer_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = timer_event_handler &rArr; timeslot_queue_async_event &rArr; event_fifo_put &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_queue_async_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[66f]"></a>timer_get_timestamp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer_control.o(i.timer_get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = timer_get_timestamp &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_available_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_get_remaining_time
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>

<P><STRONG><a name="[674]"></a>timer_init</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, timer_control.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reference_point_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[6af]"></a>timer_order_cb</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, timer_control.o(i.timer_order_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = timer_order_cb &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_available_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
</UL>

<P><STRONG><a name="[69d]"></a>timer_order_cb_ppi</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, timer_control.o(i.timer_order_cb_ppi))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_available_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_rx_timeout
</UL>

<P><STRONG><a name="[675]"></a>timer_order_cb_sync_exec</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timer_control.o(i.timer_order_cb_sync_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = timer_order_cb_sync_exec &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_available_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[671]"></a>timer_order_ppi</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timer_control.o(i.timer_order_ppi))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = timer_order_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_available_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>

<P><STRONG><a name="[6aa]"></a>timer_reference_point_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_control.o(i.timer_reference_point_set))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[676]"></a>timeslot_extend</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timeslot_handler.o(i.timeslot_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeslot_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[6b6]"></a>timeslot_get_end_time</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timeslot_handler.o(i.timeslot_get_end_time))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
</UL>

<P><STRONG><a name="[68d]"></a>timeslot_get_remaining_time</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timeslot_handler.o(i.timeslot_get_remaining_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = timeslot_get_remaining_time &rArr; timer_get_timestamp &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_callback
</UL>

<P><STRONG><a name="[67c]"></a>timeslot_handler_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, timeslot_handler.o(i.timeslot_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = timeslot_handler_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_order_earliest
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_init
</UL>

<P><STRONG><a name="[4f6]"></a>timeslot_order_earliest</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timeslot_handler.o(i.timeslot_order_earliest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timeslot_order_earliest
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_sys_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_timer_handler
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_handler_init
</UL>

<P><STRONG><a name="[68e]"></a>timeslot_queue_async_event</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timeslot_handler.o(i.timeslot_queue_async_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = timeslot_queue_async_event &rArr; event_fifo_put &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_put
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_event_handler
</UL>

<P><STRONG><a name="[307]"></a>transmit_fsm_prepare_payload</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, data_transmit_fsm.o(i.transmit_fsm_prepare_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = transmit_fsm_prepare_payload &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketAddToList
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sensor_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_emeter_task
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_IR_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_timer_event_data
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_schedule_event_data
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_datalog_task
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[67b]"></a>transport_control_step</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, transport_control.o(i.transport_control_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = transport_control_step &rArr; timeslot_queue_async_event &rArr; event_fifo_put &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_time_update
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_get_end_time
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_queue_async_event
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_abort
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_get_next_processing_time
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_timeslot_begin
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[679]"></a>transport_control_timeslot_begin</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, transport_control.o(i.transport_control_timeslot_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = transport_control_timeslot_begin &rArr; transport_control_step &rArr; timeslot_queue_async_event &rArr; event_fifo_put &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_search
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_access_address_get
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[598]"></a>trickle_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trickle.o(i.trickle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = trickle_init &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_interval_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_set
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_enable
</UL>

<P><STRONG><a name="[59d]"></a>trickle_next_processing_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, trickle.o(i.trickle_next_processing_get))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_get_next_processing_time
</UL>

<P><STRONG><a name="[5a3]"></a>trickle_register_tx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, trickle.o(i.trickle_register_tx))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_assemble
</UL>

<P><STRONG><a name="[5a5]"></a>trickle_rx_consistent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, trickle.o(i.trickle_rx_consistent))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
</UL>

<P><STRONG><a name="[59b]"></a>trickle_rx_inconsistent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trickle.o(i.trickle_rx_inconsistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = trickle_rx_inconsistent &rArr; trickle_timer_reset &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_timer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_char_val_set
</UL>

<P><STRONG><a name="[5a0]"></a>trickle_setup</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, trickle.o(i.trickle_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = trickle_setup &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_init
</UL>

<P><STRONG><a name="[5a2]"></a>trickle_step</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, trickle.o(i.trickle_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = trickle_step &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_interval_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_assemble
</UL>

<P><STRONG><a name="[6b5]"></a>trickle_time_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trickle.o(i.trickle_time_update))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
</UL>

<P><STRONG><a name="[6b9]"></a>trickle_timer_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, trickle.o(i.trickle_timer_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = trickle_timer_reset &rArr; trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_interval_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_rx_inconsistent
</UL>

<P><STRONG><a name="[69e]"></a>twi_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, shtc3.o(i.twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = twi_init &rArr; nrf_drv_twi_init &rArr; nrfx_twi_init &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_enable
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
</UL>

<P><STRONG><a name="[176]"></a>uint8ToBcd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, irutils.o(i.uint8ToBcd))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin64_setTemp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin128_setTemp
</UL>

<P><STRONG><a name="[51c]"></a>upr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes128.o(i.upr))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwd_mcol
</UL>

<P><STRONG><a name="[602]"></a>wait_for_flash_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_use_flash.o(i.wait_for_flash_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wait_for_flash_ready &rArr; nrf_fstorage_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_store
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_erase
</UL>

<P><STRONG><a name="[588]"></a>wdt_feed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.wdt_feed))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[57f]"></a>wdt_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.wdt_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[637]"></a>write_buf_store</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, peer_database.o(i.write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
</UL>

<P><STRONG><a name="[148]"></a>xorBytes</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, irutils.o(i.xorBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xorBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_calcChecksum
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_validChecksum
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Casper343_checksum
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToshibaAc_calcChecksum
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[46f]"></a>delay_operation</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system_config.o(i.delay_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_operation &rArr; app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_pending
</UL>

<P><STRONG><a name="[128]"></a>wait_for_pending</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_config.o(i.wait_for_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wait_for_pending &rArr; delay_operation &rArr; app_sched_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[49]"></a>tag_button_timeout_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, btn.o(i.tag_button_timeout_handler))
<BR>[Address Reference Count : 1]<UL><LI> btn.o(i.btn_init)
</UL>
<P><STRONG><a name="[100]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_settings.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettingsTask
</UL>

<P><STRONG><a name="[2f7]"></a>advertising_init</STRONG> (Thumb, 174 bytes, Stack size 216 bytes, app_ble.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[c0]"></a>ble_evt_handler</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, app_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[362]"></a>ble_stack_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_ble.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[4c]"></a>conn_params_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[366]"></a>conn_params_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, app_ble.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = conn_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[363]"></a>gap_params_init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, app_ble.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gap_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[57]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[58]"></a>nus_data_handler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, app_ble.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nus_data_handler &rArr; crc32_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_compute
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[46]"></a>on_adv_evt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_ble.o(i.on_adv_evt))
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.advertising_init)
</UL>
<P><STRONG><a name="[4b]"></a>on_conn_params_evt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_ble.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[365]"></a>services_init</STRONG> (Thumb, 146 bytes, Stack size 88 bytes, app_ble.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = services_init &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_init
</UL>

<P><STRONG><a name="[c5]"></a>sys_evt_dispatch</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_ble.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sys_evt_dispatch &rArr; btle_hci_adv_sd_evt_handler &rArr; ctrl_timeslot_order &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_mode
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_sys_evt_handler
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_hci_adv_sd_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[55d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>

<P><STRONG><a name="[557]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer_adc
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[558]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_adc
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[1cd]"></a>NVIC_SystemReset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[391]"></a>interrupts_disable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.interrupts_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interrupts_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
</UL>

<P><STRONG><a name="[578]"></a>log_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = log_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[580]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[581]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57e]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>fstorage_evt_handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_use_flash.o(i.fstorage_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_use_flash.o(fs_data)
</UL>
<P><STRONG><a name="[603]"></a>print_flash_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_use_flash.o(i.print_flash_info))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_use_flash_init
</UL>

<P><STRONG><a name="[3]"></a>ir_exit_state</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ir_learning_fsm.o(i.ir_exit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ir_exit_state &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_tick_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_learning_fsm.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>standby_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_learning_fsm.o(i.standby_state))
<BR>[Address Reference Count : 1]<UL><LI> ir_learning_fsm.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>start_state</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ir_learning_fsm.o(i.start_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = start_state &rArr; ir_learning_tick_loop &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_transmit_status
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_tick_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_learning_fsm.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>transmit_data_state</STRONG> (Thumb, 346 bytes, Stack size 256 bytes, ir_learning_fsm.o(i.transmit_data_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = transmit_data_state &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ble_transmit_status
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_transmit_status
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_check_status
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_tick_reset
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_learning_tick_loop
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_learning_tick
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_learning_fsm.o(.data)
</UL>
<P><STRONG><a name="[2e4]"></a>GetValueFromBitPos</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app_ac_status.o(i.GetValueFromBitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_get_status_from_payload
</UL>

<P><STRONG><a name="[2e5]"></a>SetValueToPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_ac_status.o(i.SetValueToPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetValueToPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_control_update_status_to_payload
</UL>

<P><STRONG><a name="[8]"></a>exit_state</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, data_transmit_fsm.o(i.exit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = exit_state &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_data_transmit_fsm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_transmit_fsm.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>standby_state</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, data_transmit_fsm.o(i.standby_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = standby_state &rArr; App_iSmartEventPacketGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_iSmartEventPacketGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_transmit_fsm.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>start_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, data_transmit_fsm.o(i.start_state))
<BR>[Address Reference Count : 1]<UL><LI> data_transmit_fsm.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>transmit_state</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, data_transmit_fsm.o(i.transmit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = transmit_state &rArr; protocol_send_data_to_gw &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_data_to_gw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_transmit_fsm.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>wait_state</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, data_transmit_fsm.o(i.wait_state))
<BR>[Address Reference Count : 1]<UL><LI> data_transmit_fsm.o(.data)
</UL>
<P><STRONG><a name="[2e6]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ac_timer_task.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_timer_task
</UL>

<P><STRONG><a name="[2db]"></a>_perform_measurements</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, shtc3.o(i._perform_measurements))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _perform_measurements &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_values
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_perform_measurements
</UL>

<P><STRONG><a name="[2de]"></a>_read_values</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, shtc3.o(i._read_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _read_values &rArr; checkCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHTC3_raw2Percent
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_measurements
</UL>

<P><STRONG><a name="[2e2]"></a>checkCRC</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, shtc3.o(i.checkCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = checkCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_values
</UL>

<P><STRONG><a name="[69f]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, shtc3.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
</UL>

<P><STRONG><a name="[2dd]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, shtc3.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_drv_twi_rx &rArr; nrfx_twi_rx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_read_id
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_measurements
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_init
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, shtc3.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_wakeup
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_softreset
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shtc3_read_id
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_measurements
</UL>

<P><STRONG><a name="[317]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_indicator_led.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_task
</UL>

<P><STRONG><a name="[318]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_indicator_led.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_led_task
</UL>

<P><STRONG><a name="[c]"></a>datalog_fstorage_evt_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, app_datalog.o(i.datalog_fstorage_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = datalog_fstorage_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_datalog.o(fs_data)
</UL>
<P><STRONG><a name="[3d0]"></a>datalog_print_flash_info</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app_datalog.o(i.datalog_print_flash_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = datalog_print_flash_info &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_nrf_use_flash_init
</UL>

<P><STRONG><a name="[3c8]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_datalog.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalog_clear
</UL>

<P><STRONG><a name="[39c]"></a>calculateDataChecksum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, datalogger_interface.o(i.calculateDataChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calculateDataChecksum &rArr; dataLoggerCheckSumCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerCheckSumCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLatestIndexSector
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbCRCCheckValidData
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>

<P><STRONG><a name="[3be]"></a>dbCRCCheckValidData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, datalogger_interface.o(i.dbCRCCheckValidData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dbCRCCheckValidData &rArr; calculateDataChecksum &rArr; dataLoggerCheckSumCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDataChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetDataLogTail
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>

<P><STRONG><a name="[3bd]"></a>dbGetCurrentAddress</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, datalogger_interface.o(i.dbGetCurrentAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbGetCurrentAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetDataLogTail
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
</UL>

<P><STRONG><a name="[3c3]"></a>dbGetDataLogTail</STRONG> (Thumb, 116 bytes, Stack size 632 bytes, datalogger_interface.o(i.dbGetDataLogTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = dbGetDataLogTail &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetCurrentAddress
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbCRCCheckValidData
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Pop
</UL>

<P><STRONG><a name="[3c0]"></a>dbRingLogSave</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, datalogger_interface.o(i.dbRingLogSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dbRingLogSave &rArr; dataLoggerDriver_Write &rArr; datalog_nrf_use_flash_write &rArr; datalog_nrf_use_flash_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetCurrentAddress
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDataChecksum
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Write
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Erase
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetLatestValid
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Pop
</UL>

<P><STRONG><a name="[3bf]"></a>dbShiftRingLogHead</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, datalogger_interface.o(i.dbShiftRingLogHead))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetLatestValid
</UL>

<P><STRONG><a name="[3c2]"></a>dbShiftRingLogTail</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, datalogger_interface.o(i.dbShiftRingLogTail))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Pop
</UL>

<P><STRONG><a name="[537]"></a>getConfigInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datalogger_interface.o(i.getConfigInfo))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLatestIndexSector
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
</UL>

<P><STRONG><a name="[3bc]"></a>getDataTypeInfo</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, datalogger_interface.o(i.getDataTypeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = getDataTypeInfo &rArr; searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLatestIndexSector
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDataWritten
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNewDataStructLength
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfigInfo
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetCurrentAddress
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDataChecksum
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetLatestValid
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Pop
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetNumberSaved
</UL>

<P><STRONG><a name="[3bb]"></a>getHandleInfo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, datalogger_interface.o(i.getHandleInfo))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetLatestValid
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Get
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLatestIndexSector
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbRingLogSave
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbGetDataLogTail
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbCRCCheckValidData
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Save
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Pop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLogger_GetNumberSaved
</UL>

<P><STRONG><a name="[538]"></a>getNewDataStructLength</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, datalogger_interface.o(i.getNewDataStructLength))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
</UL>

<P><STRONG><a name="[53a]"></a>isDataWritten</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, datalogger_interface.o(i.isDataWritten))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLatestIndexSector
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
</UL>

<P><STRONG><a name="[539]"></a>searchLatestIndexSector</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, datalogger_interface.o(i.searchLatestIndexSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = searchLatestIndexSector &rArr; dataLoggerDriver_Read &rArr; datalog_nrf_use_flash_read &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDataWritten
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHandleInfo
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getConfigInfo
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateDataChecksum
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataLoggerDriver_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTypeInfo
</UL>

<P><STRONG><a name="[562]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ir_lib.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_deinit
</UL>

<P><STRONG><a name="[563]"></a>__sd_nvic_is_app_accessible_priority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir_lib.o(i.__sd_nvic_is_app_accessible_priority))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_init
</UL>

<P><STRONG><a name="[2aa]"></a>pulse_count_calculate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir_lib.o(i.pulse_count_calculate))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_send
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
</UL>

<P><STRONG><a name="[564]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ir_lib.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_lib_init
</UL>

<P><STRONG><a name="[1e0]"></a>GetValueFromBitPos</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ir_dataconverter-hitachi.o(i.GetValueFromBitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
</UL>

<P><STRONG><a name="[1ea]"></a>IR_DecodeBitToByteFrame</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ir_dataconverter-hitachi.o(i.IR_DecodeBitToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_DecodeBitToByteFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
</UL>

<P><STRONG><a name="[1df]"></a>IR_DecodeByteToUserCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ir_dataconverter-hitachi.o(i.IR_DecodeByteToUserCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IR_DecodeByteToUserCmd &rArr; GetValueFromBitPos
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
</UL>

<P><STRONG><a name="[1e9]"></a>IR_DecodeRawFrameToBit_Hitachi</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ir_dataconverter-hitachi.o(i.IR_DecodeRawFrameToBit_Hitachi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_DecodeRawFrameToBit_Hitachi
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Hitachi
</UL>

<P><STRONG><a name="[1fd]"></a>IR_DetectUserCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_dataconverter-hitachi.o(i.IR_DetectUserCmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Hitachi
</UL>

<P><STRONG><a name="[1f4]"></a>IR_EncodeBitToRawFrame</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, ir_dataconverter-hitachi.o(i.IR_EncodeBitToRawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_EncodeBitToRawFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIrTxState_Hitachi
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Hitachi
</UL>

<P><STRONG><a name="[1fe]"></a>IR_EncodeByteToBitForm_Hitachi</STRONG> (Thumb, 96 bytes, Stack size 52 bytes, ir_dataconverter-hitachi.o(i.IR_EncodeByteToBitForm_Hitachi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IR_EncodeByteToBitForm_Hitachi
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Hitachi
</UL>

<P><STRONG><a name="[1f8]"></a>IR_EncodeUserCmdToByteFrame</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, ir_dataconverter-hitachi.o(i.IR_EncodeUserCmdToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_EncodeUserCmdToByteFrame &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Hitachi
</UL>

<P><STRONG><a name="[1e2]"></a>GetValueFromBitPos</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ir_dataconverter_funiki.o(i.GetValueFromBitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
</UL>

<P><STRONG><a name="[1e8]"></a>IR_DecodeBitToByteFrame</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ir_dataconverter_funiki.o(i.IR_DecodeBitToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_DecodeBitToByteFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Funiki
</UL>

<P><STRONG><a name="[1e1]"></a>IR_DecodeByteToUserCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ir_dataconverter_funiki.o(i.IR_DecodeByteToUserCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IR_DecodeByteToUserCmd &rArr; GetValueFromBitPos
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Funiki
</UL>

<P><STRONG><a name="[1e7]"></a>IR_DecodeRawFrameToBit_Funiki</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ir_dataconverter_funiki.o(i.IR_DecodeRawFrameToBit_Funiki))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_DecodeRawFrameToBit_Funiki
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Funiki
</UL>

<P><STRONG><a name="[1f5]"></a>IR_EncodeBitToRawFrame</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, ir_dataconverter_funiki.o(i.IR_EncodeBitToRawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_EncodeBitToRawFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIrTxState_Funiki
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Funiki
</UL>

<P><STRONG><a name="[1fc]"></a>IR_EncodeByteToBitForm_Funiki</STRONG> (Thumb, 96 bytes, Stack size 52 bytes, ir_dataconverter_funiki.o(i.IR_EncodeByteToBitForm_Funiki))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IR_EncodeByteToBitForm_Funiki
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Funiki
</UL>

<P><STRONG><a name="[1f9]"></a>IR_EncodeUserCmdToByteFrame</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, ir_dataconverter_funiki.o(i.IR_EncodeUserCmdToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_EncodeUserCmdToByteFrame &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Funiki
</UL>

<P><STRONG><a name="[1e4]"></a>GetValueFromBitPos</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ir_dataconverter_og104ac.o(i.GetValueFromBitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
</UL>

<P><STRONG><a name="[1f1]"></a>IR_DecodeBitToByteFrame</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ir_dataconverter_og104ac.o(i.IR_DecodeBitToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_DecodeBitToByteFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_OG104AC
</UL>

<P><STRONG><a name="[1e3]"></a>IR_DecodeByteToUserCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ir_dataconverter_og104ac.o(i.IR_DecodeByteToUserCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IR_DecodeByteToUserCmd &rArr; GetValueFromBitPos
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_OG104AC
</UL>

<P><STRONG><a name="[1f0]"></a>IR_DecodeRawFrameToBit_OG104AC</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ir_dataconverter_og104ac.o(i.IR_DecodeRawFrameToBit_OG104AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_DecodeRawFrameToBit_OG104AC
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_OG104AC
</UL>

<P><STRONG><a name="[1f6]"></a>IR_EncodeBitToRawFrame</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, ir_dataconverter_og104ac.o(i.IR_EncodeBitToRawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_EncodeBitToRawFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIrTxState_OG104AC
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_OG104AC
</UL>

<P><STRONG><a name="[1ff]"></a>IR_EncodeByteToBitForm_OG104AC</STRONG> (Thumb, 96 bytes, Stack size 52 bytes, ir_dataconverter_og104ac.o(i.IR_EncodeByteToBitForm_OG104AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IR_EncodeByteToBitForm_OG104AC
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_OG104AC
</UL>

<P><STRONG><a name="[1fa]"></a>IR_EncodeUserCmdToByteFrame</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ir_dataconverter_og104ac.o(i.IR_EncodeUserCmdToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_EncodeUserCmdToByteFrame &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_OG104AC
</UL>

<P><STRONG><a name="[1e6]"></a>GetValueFromBitPos</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ir_dataconverter_olimpia136ac.o(i.GetValueFromBitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeByteToUserCmd
</UL>

<P><STRONG><a name="[1f3]"></a>IR_DecodeBitToByteFrame</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ir_dataconverter_olimpia136ac.o(i.IR_DecodeBitToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_DecodeBitToByteFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Olimpia136AC
</UL>

<P><STRONG><a name="[1e5]"></a>IR_DecodeByteToUserCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ir_dataconverter_olimpia136ac.o(i.IR_DecodeByteToUserCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IR_DecodeByteToUserCmd &rArr; GetValueFromBitPos
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValueFromBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Olimpia136AC
</UL>

<P><STRONG><a name="[1f2]"></a>IR_DecodeRawFrameToBit_Olimpia136AC</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ir_dataconverter_olimpia136ac.o(i.IR_DecodeRawFrameToBit_Olimpia136AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_DecodeRawFrameToBit_Olimpia136AC
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_DecodeRawFrameToUserCmd_Olimpia136AC
</UL>

<P><STRONG><a name="[1f7]"></a>IR_EncodeBitToRawFrame</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, ir_dataconverter_olimpia136ac.o(i.IR_EncodeBitToRawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IR_EncodeBitToRawFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIrTxState_Olimpia136AC
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Olimpia136AC
</UL>

<P><STRONG><a name="[200]"></a>IR_EncodeByteToBitForm_Olimpia136AC</STRONG> (Thumb, 100 bytes, Stack size 52 bytes, ir_dataconverter_olimpia136ac.o(i.IR_EncodeByteToBitForm_Olimpia136AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IR_EncodeByteToBitForm_Olimpia136AC
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Olimpia136AC
</UL>

<P><STRONG><a name="[1fb]"></a>IR_EncodeUserCmdToByteFrame</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ir_dataconverter_olimpia136ac.o(i.IR_EncodeUserCmdToByteFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IR_EncodeUserCmdToByteFrame &rArr; nrf_log_frontend_std_0 &rArr;  std_n (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EncodeUserCmdToIRProtocol_Olimpia136AC
</UL>

<P><STRONG><a name="[178]"></a>Daikin152_convertFan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin152_convertFan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin152_convertFan
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertFan
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[17a]"></a>Daikin152_convertMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_daikin.o(i.Daikin152_convertMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Daikin152_convertMode
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_convertMode
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin152
</UL>

<P><STRONG><a name="[180]"></a>Daikin152_validChecksum</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin152_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin152_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_recv
</UL>

<P><STRONG><a name="[492]"></a>Daikin176_convertFan</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[490]"></a>Daikin176_convertMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Daikin176
</UL>

<P><STRONG><a name="[3fb]"></a>Daikin176_toCommonFanSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[3fd]"></a>Daikin176_toCommonMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_daikin.o(i.Daikin176_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin176
</UL>

<P><STRONG><a name="[190]"></a>Daikin176_validChecksum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ir_daikin.o(i.Daikin176_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Daikin176_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin176_recv
</UL>

<P><STRONG><a name="[179]"></a>DaikinESP_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_convertFan
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_convertFan
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_convertFan
</UL>

<P><STRONG><a name="[17b]"></a>DaikinESP_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_DaikinESP
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin152_convertMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin2_convertMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin216_convertMode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Daikin160_convertMode
</UL>

<P><STRONG><a name="[3f0]"></a>DaikinESP_toCommonFanSpeed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[3f3]"></a>DaikinESP_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_daikin.o(i.DaikinESP_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_DaikinESP
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin216
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Daikin152
</UL>

<P><STRONG><a name="[1ba]"></a>DaikinESP_validChecksum</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ir_daikin.o(i.DaikinESP_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DaikinESP_validChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaikinESP_recv
</UL>

<P><STRONG><a name="[20d]"></a>LG_calcChecksum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ir_lg.o(i.LG_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LG_calcChecksum &rArr; sumNibbles_64
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumNibbles_64
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_checksum
</UL>

<P><STRONG><a name="[20f]"></a>LG_checksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_lg.o(i.LG_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LG_checksum &rArr; LG_calcChecksum &rArr; sumNibbles_64
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getRaw
</UL>

<P><STRONG><a name="[4a7]"></a>LG_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_lg.o(i.LG_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[4a5]"></a>LG_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_lg.o(i.LG_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_LG
</UL>

<P><STRONG><a name="[221]"></a>LG_getVaneCode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ir_lg.o(i.LG_getVaneCode))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
</UL>

<P><STRONG><a name="[418]"></a>LG_toCommonFanSpeed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir_lg.o(i.LG_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[41b]"></a>LG_toCommonMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_lg.o(i.LG_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_LG
</UL>

<P><STRONG><a name="[21f]"></a>_isAKB73757604</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ir_lg.o(i._isAKB73757604))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _isAKB73757604
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isVaneSwingV
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isSwingH
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
</UL>

<P><STRONG><a name="[21d]"></a>_isAKB74955603</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ir_lg.o(i._isAKB74955603))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _isAKB74955603 &rArr; _isNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isSwingV
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isLightToggle
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isNormal
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_setRaw
</UL>

<P><STRONG><a name="[212]"></a>_isNormal</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, ir_lg.o(i._isNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _isNormal
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_isSwing
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LG_getTemp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isAKB74955603
</UL>

<P><STRONG><a name="[227]"></a>Mitsubishi112_calcChecksum</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ir_mitsubishi112.o(i.Mitsubishi112_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mitsubishi112_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_validChecksum
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_checksum
</UL>

<P><STRONG><a name="[228]"></a>Mitsubishi112_checksum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_mitsubishi112.o(i.Mitsubishi112_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mitsubishi112_checksum &rArr; Mitsubishi112_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_getRaw
</UL>

<P><STRONG><a name="[4ac]"></a>Mitsubishi112_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[4aa]"></a>Mitsubishi112_convertMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi112
</UL>

<P><STRONG><a name="[41f]"></a>Mitsubishi112_toCommonFanSpeed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[422]"></a>Mitsubishi112_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_mitsubishi112.o(i.Mitsubishi112_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi112
</UL>

<P><STRONG><a name="[22b]"></a>Mitsubishi112_validChecksum</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ir_mitsubishi112.o(i.Mitsubishi112_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Mitsubishi112_validChecksum &rArr; Mitsubishi112_calcChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi112_recv
</UL>

<P><STRONG><a name="[22f]"></a>Mitsubishi136_checksum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_checksum))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_getRaw
</UL>

<P><STRONG><a name="[4b3]"></a>Mitsubishi136_convertFan</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[4b1]"></a>Mitsubishi136_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi136
</UL>

<P><STRONG><a name="[426]"></a>Mitsubishi136_toCommonFanSpeed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[429]"></a>Mitsubishi136_toCommonMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_mitsubishi136.o(i.Mitsubishi136_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi136
</UL>

<P><STRONG><a name="[231]"></a>Mitsubishi136_validChecksum</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ir_mitsubishi136.o(i.Mitsubishi136_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Mitsubishi136_validChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi136_recv
</UL>

<P><STRONG><a name="[234]"></a>Mitsubishi144_calculateChecksum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ir_mitsubishi144.o(i.Mitsubishi144_calculateChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mitsubishi144_calculateChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_checksum
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_validChecksum
</UL>

<P><STRONG><a name="[4b9]"></a>Mitsubishi144_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[4b7]"></a>Mitsubishi144_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Mitsubishi144
</UL>

<P><STRONG><a name="[42c]"></a>Mitsubishi144_toCommonFanSpeed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[42f]"></a>Mitsubishi144_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_mitsubishi144.o(i.Mitsubishi144_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Mitsubishi144
</UL>

<P><STRONG><a name="[239]"></a>Mitsubishi144_validChecksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_mitsubishi144.o(i.Mitsubishi144_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mitsubishi144_validChecksum &rArr; Mitsubishi144_calculateChecksum &rArr; sumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_calculateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mitsubishi144_recv
</UL>

<P><STRONG><a name="[4d0]"></a>PanasonicAc32_convertFan</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[4ce]"></a>PanasonicAc32_convertMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_PanasonicAc32
</UL>

<P><STRONG><a name="[449]"></a>PanasonicAc32_toCommonFanSpeed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[44c]"></a>PanasonicAc32_toCommonMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ir_panasonic32.o(i.PanasonicAc32_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_PanasonicAc32
</UL>

<P><STRONG><a name="[285]"></a>Sanyo_calcChecksum</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ir_sanyo.o(i.Sanyo_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sanyo_calcChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumNibbles_8
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_checksum
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_validChecksum
</UL>

<P><STRONG><a name="[4e6]"></a>Sanyo_convertFan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[4e4]"></a>Sanyo_convertMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sanyo
</UL>

<P><STRONG><a name="[460]"></a>Sanyo_toCommonFanSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_toCommonFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[463]"></a>Sanyo_toCommonMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ir_sanyo.o(i.Sanyo_toCommonMode))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_Sanyo
</UL>

<P><STRONG><a name="[289]"></a>Sanyo_validChecksum</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ir_sanyo.o(i.Sanyo_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sanyo_validChecksum &rArr; Sanyo_calcChecksum &rArr; sumNibbles_8
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sanyo_recv
</UL>

<P><STRONG><a name="[28b]"></a>Sharp_calcChecksum</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_calcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sharp_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_validChecksum
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_checksum
</UL>

<P><STRONG><a name="[28c]"></a>Sharp_checksum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_sharp.o(i.Sharp_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sharp_checksum &rArr; Sharp_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_getRaw
</UL>

<P><STRONG><a name="[4ea]"></a>Sharp_convertFan</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_convertFan))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
</UL>

<P><STRONG><a name="[4e9]"></a>Sharp_convertMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ir_sharp.o(i.Sharp_convertMode))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_Sharp
</UL>

<P><STRONG><a name="[293]"></a>Sharp_validChecksum</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ir_sharp.o(i.Sharp_validChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Sharp_validChecksum &rArr; Sharp_calcChecksum &rArr; xorBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_calcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_recv
</UL>

<P><STRONG><a name="[2ce]"></a>swapData</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ir_vestel.o(i.swapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = swapData
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VestelAc_send
</UL>

<P><STRONG><a name="[390]"></a>timers_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, boards.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = timers_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boards_init
</UL>

<P><STRONG><a name="[335]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[34e]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3ad]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[352]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[34f]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[353]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[355]"></a>name_encode</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[354]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[350]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[336]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[351]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[6cc]"></a>uuid_list_sized_encode</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[2f6]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[2f5]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[624]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
</UL>

<P><STRONG><a name="[358]"></a>config_is_valid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_advertising.o(i.config_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[518]"></a>flags_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[359]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[35a]"></a>on_disconnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[35b]"></a>on_terminated</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(i.on_terminated))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[35c]"></a>phy_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[35e]"></a>set_adv_mode_directed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[35d]"></a>set_adv_mode_directed_high_duty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_high_duty))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[35f]"></a>set_adv_mode_fast</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[360]"></a>set_adv_mode_slow</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[69c]"></a>use_whitelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = use_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[6ca]"></a>whitelist_has_entries</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
</UL>

<P><STRONG><a name="[bc]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3ae]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[622]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[623]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[37a]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[377]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[378]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[379]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3af]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[697]"></a>send_update_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_params.o(i.send_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[48]"></a>update_timeout_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_timeout_handler &rArr; send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[b9]"></a>ble_evt_handler</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[36e]"></a>for_each_set_flag</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ble_conn_state.o(i.for_each_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[37c]"></a>record_activate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_activate &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[685]"></a>record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_invalidate &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[37b]"></a>record_purge_disconnected</STRONG> (Thumb, 66 bytes, Stack size 104 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[37d]"></a>record_set_disconnected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_set_disconnected &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[36d]"></a>user_flag_is_acquired</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[3a0]"></a>set_security_req</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[389]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[3c4]"></a>data_length_update</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[5c1]"></a>link_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[5c2]"></a>on_connected_evt</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = on_connected_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5c6]"></a>on_data_length_update_evt</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5c7]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5c3]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5c5]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5c4]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = on_exchange_mtu_rsp_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[5cb]"></a>on_rw_authorize_request</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_ble_qwr.o(i.on_rw_authorize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_rw_authorize_request
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[5ca]"></a>on_user_mem_release</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.on_user_mem_release))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[5c9]"></a>on_user_mem_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.on_user_mem_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_user_mem_request &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[5c8]"></a>user_mem_reply</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
</UL>

<P><STRONG><a name="[63e]"></a>file_id_to_peer_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_to_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
</UL>

<P><STRONG><a name="[696]"></a>pds_evt_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
</UL>

<P><STRONG><a name="[644]"></a>peer_data_delete_process</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_delete_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[63f]"></a>peer_data_find</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[63c]"></a>peer_data_id_is_valid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[63d]"></a>peer_data_id_to_record_key</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_to_record_key))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[640]"></a>peer_id_to_file_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_id_to_file_id))
<BR><BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[648]"></a>send_unexpected_error</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, peer_data_storage.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_unexpected_error &rArr; pds_evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[62c]"></a>pdb_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[646]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[635]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
</UL>

<P><STRONG><a name="[62d]"></a>reattempt_previous_operations</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, peer_database.o(i.reattempt_previous_operations))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = reattempt_previous_operations &rArr; write_buf_store_in_event &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store_in_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[6cd]"></a>write_buf_length_words_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peer_database.o(i.write_buf_length_words_set))
<BR><BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[67e]"></a>write_buf_store_in_event</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, peer_database.o(i.write_buf_store_in_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = write_buf_store_in_event &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
</UL>

<P><STRONG><a name="[631]"></a>write_buffer_record_acquire</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_buffer_record_acquire &rArr; write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[630]"></a>write_buffer_record_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>

<P><STRONG><a name="[62e]"></a>write_buffer_record_find_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>

<P><STRONG><a name="[62a]"></a>write_buffer_record_find_stored</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_find_stored))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[6ce]"></a>write_buffer_record_find_unused</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_acquire
</UL>

<P><STRONG><a name="[633]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[62b]"></a>write_buffer_record_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; mutex_unlock &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[3a1]"></a>claim</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[649]"></a>release</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[bd]"></a>ble_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peer_manager.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ble_evt_handler &rArr; sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[64f]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gscm_evt_handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
</UL>

<P><STRONG><a name="[650]"></a>rank_vars_update</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, peer_manager.o(i.rank_vars_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rank_vars_update &rArr; pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[4e]"></a>apply_pending_handle</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.apply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = apply_pending_handle &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_ble_evt_handler)
</UL>
<P><STRONG><a name="[39e]"></a>car_update_needed</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.car_update_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = car_update_needed &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[60]"></a>car_update_pending_handle</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.car_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = car_update_pending_handle &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[530]"></a>cccd_written</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.cccd_written))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[5f]"></a>db_update_pending_handle</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.db_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = db_update_pending_handle &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_mtx_unlock
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[506]"></a>evt_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[338]"></a>local_db_apply_in_evt</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_handle
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[531]"></a>local_db_update</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.local_db_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = local_db_update &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[3d5]"></a>local_db_update_in_evt</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
</UL>

<P><STRONG><a name="[3d6]"></a>nrf_mtx_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.nrf_mtx_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
</UL>

<P><STRONG><a name="[56]"></a>sc_send_pending_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.sc_send_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = sc_send_pending_handle &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.service_changed_pending_flags_check)
</UL>
<P><STRONG><a name="[577]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[69a]"></a>service_changed_cccd</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.service_changed_cccd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_changed_cccd
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[535]"></a>service_changed_needed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.service_changed_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = service_changed_needed &rArr; gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[534]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = service_changed_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[689]"></a>service_changed_send_in_evt</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_cccd
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
</UL>

<P><STRONG><a name="[532]"></a>update_pending_flags_check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[507]"></a>evt_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = evt_send &rArr; im_conn_handle_get &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>

<P><STRONG><a name="[542]"></a>service_changed_pending_set</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = service_changed_pending_set &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[5a8]"></a>mutex_lock</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pm_buffer.o(i.mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mutex_lock &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[5a9]"></a>mutex_lock_status_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pm_buffer.o(i.mutex_lock_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mutex_lock_status_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
</UL>

<P><STRONG><a name="[5aa]"></a>mutex_unlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pm_buffer.o(i.mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mutex_unlock &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[2fd]"></a>allow_repairing</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_dispatcher.o(i.allow_repairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = allow_repairing &rArr; ble_conn_state_user_flag_get &rArr; user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[33b]"></a>auth_status_failure_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_failure_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = auth_status_failure_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[33d]"></a>auth_status_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[33e]"></a>auth_status_success_process</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_storage_full_evt
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_success_evt_send
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[3b0]"></a>conn_sec_failure</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, security_dispatcher.o(i.conn_sec_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>

<P><STRONG><a name="[3b2]"></a>conn_sec_update_process</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, security_dispatcher.o(i.conn_sec_update_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = conn_sec_update_process &rArr; encryption_failure &rArr; conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[473]"></a>disconnect_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.disconnect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = disconnect_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[3b4]"></a>encryption_failure</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = encryption_failure &rArr; conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[3b1]"></a>evt_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_storage_full_evt
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_params_req
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_success_evt_send
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>

<P><STRONG><a name="[56c]"></a>link_secure_authenticate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = link_secure_authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_peripheral
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[56b]"></a>link_secure_central</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, security_dispatcher.o(i.link_secure_central))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = link_secure_central &rArr; link_secure_central_encryption &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_encryption
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[56d]"></a>link_secure_central_encryption</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, security_dispatcher.o(i.link_secure_central_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = link_secure_central_encryption &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[33c]"></a>link_secure_failure</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_procedure
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>

<P><STRONG><a name="[571]"></a>link_secure_peripheral</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = link_secure_peripheral &rArr; link_secure_authenticate
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[3b3]"></a>pairing</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_dispatcher.o(i.pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pairing &rArr; ble_conn_state_user_flag_get &rArr; user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[570]"></a>pairing_failure</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[340]"></a>pairing_success_evt_send</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, security_dispatcher.o(i.pairing_success_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pairing_success_evt_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[68f]"></a>sec_info_request_process</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sec_info_request_process &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[690]"></a>sec_keyset_fill</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_keyset_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[691]"></a>sec_params_request_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, security_dispatcher.o(i.sec_params_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sec_params_request_process &rArr; sec_proc_start &rArr; sec_start_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_params_req
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[56e]"></a>sec_proc_start</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sec_proc_start &rArr; sec_start_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_encryption
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[56f]"></a>sec_procedure</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, security_dispatcher.o(i.sec_procedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_procedure &rArr; ble_conn_state_user_flag_get &rArr; user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[695]"></a>sec_request_process</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sec_request_process &rArr; sec_procedure &rArr; ble_conn_state_user_flag_get &rArr; user_flag_is_acquired &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_procedure
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[693]"></a>sec_start_send</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, security_dispatcher.o(i.sec_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sec_start_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>

<P><STRONG><a name="[346]"></a>send_config_req</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_config_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[692]"></a>send_params_req</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, security_dispatcher.o(i.send_params_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_params_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
</UL>

<P><STRONG><a name="[349]"></a>send_storage_full_evt</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, security_dispatcher.o(i.send_storage_full_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_storage_full_evt &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[342]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, security_dispatcher.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[503]"></a>events_send_from_err_code</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[505]"></a>evt_forward</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, security_manager.o(i.evt_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_forward &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[504]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_forward
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
</UL>

<P><STRONG><a name="[519]"></a>flags_set_from_err_code</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[567]"></a>link_secure</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_encryption &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
</UL>

<P><STRONG><a name="[5b]"></a>link_secure_pending_handle</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, security_manager.o(i.link_secure_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = link_secure_pending_handle &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_encryption &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[568]"></a>new_context_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.new_context_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = new_context_get
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[5a]"></a>params_reply_pending_handle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, security_manager.o(i.params_reply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = params_reply_pending_handle &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[569]"></a>params_req_send</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, security_manager.o(i.params_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = params_req_send &rArr; im_peer_id_get_by_conn_handle &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[694]"></a>sec_req_process</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, security_manager.o(i.sec_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sec_req_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_encryption &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[629]"></a>smd_params_reply_perform</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_handle
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[54b]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, id_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[384]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[386]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ble_nus.o(i.on_hvx_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[385]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[373]"></a>char_add</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[375]"></a>pnp_id_encode</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pnp_id_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[374]"></a>sys_id_encode</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sys_id_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[652]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_dis.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
</UL>

<P><STRONG><a name="[3a4]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[4f]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[3a5]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[565]"></a>lfclk_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfclk_stop &rArr; nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[c8]"></a>sd_state_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[c2]"></a>soc_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[24e]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[24f]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[250]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[605]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>

<P><STRONG><a name="[613]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[604]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[60d]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[610]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[60a]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[64b]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
</UL>

<P><STRONG><a name="[611]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[608]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[60c]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[5e1]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[5e0]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[60e]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[612]"></a>pin_configured_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pin_configured_set &rArr; nrf_bitmask_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[60f]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[607]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[609]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[615]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[267]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[61a]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
</UL>

<P><STRONG><a name="[264]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[617]"></a>nrf_saadc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
</UL>

<P><STRONG><a name="[618]"></a>nrf_saadc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
</UL>

<P><STRONG><a name="[266]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[6bc]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[6ba]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[6bb]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[5d1]"></a>twi_clear_bus</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = twi_clear_bus &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[50]"></a>twi_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.twi_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = twi_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[61d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_twi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
</UL>

<P><STRONG><a name="[6c0]"></a>nrf_twi_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[6c8]"></a>nrf_twi_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[6c4]"></a>nrf_twi_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_twi.o(i.nrf_twi_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[6c9]"></a>nrf_twi_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>

<P><STRONG><a name="[6c5]"></a>nrf_twi_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[6c2]"></a>nrf_twi_shorts_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_shorts_set))
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
</UL>

<P><STRONG><a name="[6c3]"></a>nrf_twi_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
</UL>

<P><STRONG><a name="[61e]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
</UL>

<P><STRONG><a name="[273]"></a>twi_irq_handler</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nrfx_twi.o(i.twi_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = twi_irq_handler &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_errorsrc_get_and_clear
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[6c6]"></a>twi_process_error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrfx_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[6c1]"></a>twi_receive_byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrfx_twi.o(i.twi_receive_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_receive_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[6bf]"></a>twi_rx_start_transfer</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, nrfx_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[6c7]"></a>twi_send_byte</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[6bd]"></a>twi_transfer</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, nrfx_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_receive_byte
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[6be]"></a>twi_tx_start_transfer</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, nrfx_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_task_trigger
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_shorts_set
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[620]"></a>twi_xfer</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, nrfx_twi.o(i.twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = twi_xfer &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_enable
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_int_disable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_xfer
</UL>

<P><STRONG><a name="[322]"></a>next_index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_scheduler.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
</UL>

<P><STRONG><a name="[329]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[32b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[6ae]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[32a]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[3a6]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[6ab]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[6ac]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[574]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[3aa]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3a9]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[326]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[32c]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[3a8]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_start &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[328]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3a7]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[6b2]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[275]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[6ad]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[576]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[575]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[32e]"></a>timer_start_op_schedule</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[330]"></a>timer_stop_op_schedule</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[25e]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[3ab]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[6b0]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[6b1]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[334]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[332]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[5c0]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[5be]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[399]"></a>buffer_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[55b]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[5d7]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[55c]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[590]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[600]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[2f3]"></a>address_is_valid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[470]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[65c]"></a>event_prepare</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, fds.o(i.event_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[65d]"></a>event_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[472]"></a>file_find_and_delete</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[d]"></a>fs_event_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[51f]"></a>gc_execute</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[52a]"></a>gc_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[521]"></a>gc_next_page</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[524]"></a>gc_page_erase</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[527]"></a>gc_page_next</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[523]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[522]"></a>gc_record_find_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[520]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_state_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[528]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gc_swap_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[52c]"></a>gc_swap_pages</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[525]"></a>gc_swap_promote</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[526]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[52b]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[545]"></a>header_check</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fds.o(i.header_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_jump
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[680]"></a>header_has_next</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>

<P><STRONG><a name="[546]"></a>header_jump</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fds.o(i.header_jump))
<BR><BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>

<P><STRONG><a name="[555]"></a>init_execute</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2f4]"></a>is_word_aligned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[67f]"></a>page_from_record</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[6d2]"></a>page_has_space</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fds.o(i.page_has_space))
<BR><BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>

<P><STRONG><a name="[6d1]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[52d]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[52e]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[50a]"></a>queue_buf_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[50b]"></a>queue_buf_store</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[657]"></a>queue_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[658]"></a>queue_has_next</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.queue_has_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = queue_has_next &rArr; nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[659]"></a>queue_load</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fds.o(i.queue_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_load &rArr; nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[51a]"></a>queue_process</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_has_next
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[50c]"></a>queue_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[510]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = record_find &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[471]"></a>record_find_and_delete</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[50e]"></a>record_find_by_desc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_find_by_desc &rArr; record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[529]"></a>record_find_next</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_next &rArr; header_check
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_jump
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[517]"></a>record_header_flag_dirty</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[681]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_write_begin &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[682]"></a>record_header_write_finalize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_write_finalize &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[683]"></a>record_header_write_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_header_write_id &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[684]"></a>record_id_new</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fds.o(i.record_id_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = record_id_new &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[686]"></a>record_write_data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fds.o(i.record_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = record_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[515]"></a>write_enqueue</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[65b]"></a>write_execute</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = write_execute &rArr; record_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_data
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[6d0]"></a>write_space_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.write_space_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_space_free
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[6cf]"></a>write_space_reserve</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_has_space
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[6cb]"></a>error_check</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_gpiote.o(i.error_check))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>

<P><STRONG><a name="[313]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, app_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_handler
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_enable
</UL>

<P><STRONG><a name="[315]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, app_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_handler
</UL>

<P><STRONG><a name="[312]"></a>nrf_bitmask_masks_or</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_gpiote.o(i.nrf_bitmask_masks_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_bitmask_masks_or
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_register
</UL>

<P><STRONG><a name="[53d]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_handler
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_enable
</UL>

<P><STRONG><a name="[64c]"></a>pin_event_enable</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_gpiote.o(i.pin_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pin_event_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_enable
</UL>

<P><STRONG><a name="[310]"></a>user_enable</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_gpiote.o(i.user_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = user_enable &rArr; pin_event_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_event_enable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gpiote_user_enable
</UL>

<P><STRONG><a name="[5da]"></a>addr_is_aligned32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[5d8]"></a>addr_is_page_aligned</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_page_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[5d9]"></a>addr_is_within_bounds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[b2]"></a>erase</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[65f]"></a>erase_execute</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[502]"></a>event_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[ae]"></a>init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>is_busy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[5dd]"></a>on_operation_failure</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_failure))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[5dc]"></a>on_operation_success</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_success))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[5de]"></a>queue_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[65a]"></a>queue_load_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_load_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_load_next &rArr; nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[5db]"></a>queue_process</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[4f9]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[b0]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>rmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>uninit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>wmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[65e]"></a>write_execute</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[b8]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[5e3]"></a>backend_id_assign</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.backend_id_assign))
<BR><BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[396]"></a>buf_prealloc</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[474]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[57c]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[398]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[5a6]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[6a7]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[5ee]"></a>std_n</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
</UL>

<P><STRONG><a name="[5f0]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[5ef]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[654]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[269]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[26b]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[26d]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[26c]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[68b]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[5ff]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[68a]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[5fb]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[5fc]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[5fd]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[5fe]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[c6]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 114 bytes, Stack size 544 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[5f7]"></a>ram_end_address_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.ram_end_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
</UL>

<P><STRONG><a name="[c7]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[591]"></a>_convert_ble_addr_to_long</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mesh_utils.o(i._convert_ble_addr_to_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _convert_ble_addr_to_long
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_add_packet
</UL>

<P><STRONG><a name="[66e]"></a>radio_channel_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, radio_control.o(i.radio_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = radio_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>

<P><STRONG><a name="[667]"></a>radio_fifo_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, radio_control.o(i.radio_fifo_empty))
<BR><BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get
</UL>

<P><STRONG><a name="[661]"></a>radio_fifo_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, radio_control.o(i.radio_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_disable
</UL>

<P><STRONG><a name="[66c]"></a>radio_fifo_full</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio_control.o(i.radio_fifo_full))
<BR><BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_put
</UL>

<P><STRONG><a name="[666]"></a>radio_fifo_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, radio_control.o(i.radio_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = radio_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_empty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>

<P><STRONG><a name="[66a]"></a>radio_fifo_get_length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_control.o(i.radio_fifo_get_length))
<BR><BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_will_go_to_disabled_state
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek_at
</UL>

<P><STRONG><a name="[668]"></a>radio_fifo_peek</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_control.o(i.radio_fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = radio_fifo_peek &rArr; radio_fifo_peek_at
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek_at
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>

<P><STRONG><a name="[669]"></a>radio_fifo_peek_at</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, radio_control.o(i.radio_fifo_peek_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = radio_fifo_peek_at
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get_length
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_will_go_to_disabled_state
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek
</UL>

<P><STRONG><a name="[66b]"></a>radio_fifo_put</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, radio_control.o(i.radio_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = radio_fifo_put &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_full
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
</UL>

<P><STRONG><a name="[665]"></a>radio_transition_end</STRONG> (Thumb, 484 bytes, Stack size 88 bytes, radio_control.o(i.radio_transition_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = radio_transition_end &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_ppi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_rx_timeout
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek_at
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get_length
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_empty
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_abort_cb
</UL>

<P><STRONG><a name="[672]"></a>radio_will_go_to_disabled_state</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, radio_control.o(i.radio_will_go_to_disabled_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = radio_will_go_to_disabled_state &rArr; radio_fifo_peek_at
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_peek_at
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_fifo_get_length
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
</UL>

<P><STRONG><a name="[59]"></a>rx_abort_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio_control.o(i.rx_abort_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = rx_abort_cb &rArr; radio_transition_end &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_control.o(i.setup_rx_timeout)
</UL>
<P><STRONG><a name="[670]"></a>setup_rx_timeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, radio_control.o(i.setup_rx_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb_ppi
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_transition_end
</UL>

<P><STRONG><a name="[6a9]"></a>get_available_timer</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, timer_control.o(i.get_available_timer))
<BR><BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb_sync_exec
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_ppi
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb_ppi
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
</UL>

<P><STRONG><a name="[677]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timeslot_handler.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_queue_async_event
</UL>

<P><STRONG><a name="[678]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timeslot_handler.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_queue_async_event
</UL>

<P><STRONG><a name="[339]"></a>async_event_execute</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timeslot_handler.o(i.async_event_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = async_event_execute &rArr; mesh_srv_packet_process &rArr; rbc_mesh_event_handler &rArr; AppShowiSmartPacket &rArr; nrf_log_frontend_std_6 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_process
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_SWI0_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>end_timer_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timeslot_handler.o(i.end_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = end_timer_handler &rArr; timeslot_order_earliest
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_order_earliest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeslot_handler.o(i.radio_signal_callback)
</UL>
<P><STRONG><a name="[4ff]"></a>event_fifo_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timeslot_handler.o(i.event_fifo_empty))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_SWI0_IRQHandler
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_get
</UL>

<P><STRONG><a name="[673]"></a>event_fifo_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timeslot_handler.o(i.event_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_signal_callback
</UL>

<P><STRONG><a name="[501]"></a>event_fifo_full</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timeslot_handler.o(i.event_fifo_full))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_put
</UL>

<P><STRONG><a name="[4fe]"></a>event_fifo_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timeslot_handler.o(i.event_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_empty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_SWI0_IRQHandler
</UL>

<P><STRONG><a name="[500]"></a>event_fifo_put</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, timeslot_handler.o(i.event_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = event_fifo_put &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_full
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_queue_async_event
</UL>

<P><STRONG><a name="[5d]"></a>radio_signal_callback</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, timeslot_handler.o(i.radio_signal_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = radio_signal_callback &rArr; radio_event_handler &rArr; radio_transition_end &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_timeslot_begin
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_step
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_extend
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_fifo_flush
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb_sync_exec
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_event_handler
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_abort
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_event_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeslot_handler.o(i.timeslot_handler_init)
</UL>
<P><STRONG><a name="[68c]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, timeslot_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_handler_init
</UL>

<P><STRONG><a name="[625]"></a>order_search</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, transport_control.o(i.order_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = order_search &rArr; radio_order &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_channel_get
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step_callback
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_callback
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_control_timeslot_begin
</UL>

<P><STRONG><a name="[53]"></a>search_callback</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, transport_control.o(i.search_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = search_callback &rArr; order_search &rArr; radio_order &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_create_from_data
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_search
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_get_remaining_time
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_queue_async_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transport_control.o(i.order_search)
</UL>
<P><STRONG><a name="[5e]"></a>trickle_step_callback</STRONG> (Thumb, 274 bytes, Stack size 120 bytes, transport_control.o(i.trickle_step_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = trickle_step_callback &rArr; order_search &rArr; radio_order &rArr; setup_rx_timeout &rArr; timer_order_cb_ppi &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_time_update
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_search
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_get_remaining_time
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_get_end_time
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_order_cb
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbc_mesh_channel_get
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_timestamp
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_abort
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_order
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_disable
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_packet_assemble
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_srv_get_next_processing_time
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> transport_control.o(i.transport_control_step)
<LI> transport_control.o(i.trickle_step_callback)
</UL>
<P><STRONG><a name="[6b8]"></a>trickle_interval_begin</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, trickle.o(i.trickle_interval_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = trickle_interval_begin &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_step
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trickle_timer_reset
</UL>

<P><STRONG><a name="[12d]"></a>CalcEnergy</STRONG> (Thumb, 422 bytes, Stack size 96 bytes, smarthome_meter.o(i.CalcEnergy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = CalcEnergy &rArr; LL_iir_1ord &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRACLIB_FFMUL32
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_div_llll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mul_lll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_add
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcWattHours
</UL>

<P><STRONG><a name="[133]"></a>LL_abs</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, smarthome_meter.o(i.LL_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[130]"></a>LL_add</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, smarthome_meter.o(i.LL_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[12f]"></a>LL_iir_1ord</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, smarthome_meter.o(i.LL_iir_1ord))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LL_iir_1ord &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mul_lll
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[223]"></a>LL_iir_1ord_ll</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, smarthome_meter.o(i.LL_iir_1ord_ll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LL_iir_1ord_ll &rArr; LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRACLIB_FFMUL32
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mul_lll
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_RemoveDcBias
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
</UL>

<P><STRONG><a name="[131]"></a>LL_mul_lll</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, smarthome_meter.o(i.LL_mul_lll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LL_mul_lll
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRACLIB_FFMUL32
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRACLIB_USMUL32
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord_ll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[132]"></a>LL_sub</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, smarthome_meter.o(i.LL_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord_ll
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_iir_1ord
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEnergy
</UL>

<P><STRONG><a name="[26f]"></a>L_extract_hi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smarthome_meter.o(i.L_extract_hi))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_ReadResults
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcWattHours
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTHOME_CalcAuxiliary
</UL>

<P><STRONG><a name="[226]"></a>L_extract_hi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fraclib.o(i.L_extract_hi))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_sqr_ll
</UL>

<P><STRONG><a name="[2d4]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d3]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[2e0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2df]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[42]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
